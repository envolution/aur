name: Arch Linux Task
on:
  schedule:
    - cron: '0 */12 * * *'  # Runs every 12 hours
  workflow_dispatch:  # Allows manual triggering

jobs:
  arch-task:
  #  runs-on: ubuntu-latest
    runs-on: self-hosted
    container:
      image: archlinux:latest
      options: --privileged
    env:
        AUR_MAINTAINER_NAME: envolution
        GIT_USERNAME: envolution
        GIT_EMAIL: involution@gmail.com
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize pacman keyring
        run: |
          # Initialize keyring with proper permissions
          mkdir -p /etc/pacman.d/gnupg
          pacman-key --init
          pacman-key --populate archlinux
          echo -e "\n[multilib]" >> /etc/pacman.conf
          echo "Include = /etc/pacman.d/mirrorlist" >> /etc/pacman.conf
          cat /etc/pacman.conf

          # Update system and install dependencies
          pacman -Sy --noconfirm --needed archlinux-keyring
          pacman -Syu --noconfirm
          pacman -S --noconfirm --needed git base-devel pacman-contrib \
            openssh github-cli jq expac ruby-rdoc ruby-pkg-config gnupg \
            pyalpm python-awesomeversion python-packaging python-lxml \
            python-jq python-gobject libnotify

      - name: Setup non-root user for AUR
        run: |
          # Create build user with sudo access
          useradd -m builder
          echo "builder ALL=(ALL) NOPASSWD: ALL" > /etc/sudoers.d/builder
          chmod 440 /etc/sudoers.d/builder

          # Create build directories with proper permissions
          install -d -m 755 /home/builder/.cache/paru
          install -d -m 755 /home/builder/.local/share/paru
          install -d -m 755 /home/builder/.gnupg
          chown -R builder:builder /home/builder

      - name: Install paru
        run: |
          cd /tmp
          sudo -u builder git clone https://aur.archlinux.org/paru-bin.git
          cd paru-bin
          sudo -u builder makepkg -si --noconfirm

          # Configure paru
          echo '[options]
          BatchInstall
          BottomUp
          RemoveMake
          SudoLoop
          UseAsk' | sudo tee /etc/paru.conf          

      - name: Setup SSH key
        run: |
          sudo -u builder mkdir -p /home/builder/.ssh
          sudo -u builder echo "${{ secrets.AUR_SSH_PRIVATE_KEY }}" > /home/builder/.ssh/aur
          sudo -u builder ssh-keyscan aur.archlinux.org >> /home/builder/.ssh/known_hosts
          sudo -u builder cat /home/builder/.ssh/known_hosts
          sudo -u builder cat >> /home/builder/.ssh/config << EOF
          Host aur.archlinux.org
                IdentityFile /home/builder/.ssh/aur
                User aur
          EOF

      - name: Configure Git
        run: |
          sudo -u builder git config --global user.name "${{ env.GIT_USERNAME }}"
          sudo -u builder git config --global user.email "${{ env.GIT_EMAIL }}"          


      - name: Run task
        run: |
          #!/bin/bash
          set -euo pipefail
          
          # Your task logic goes here
          echo "Starting task..."
          paru -S --noconfirm nvchecker
          
          # Example environment setup
          sudo -u builder mkdir -p /home/builder/nvchecker
          cd /home/builder/nvchecker
          [ -f ${GITHUB_WORKSPACE}/github_version.py ] && \
            cp ${GITHUB_WORKSPACE}/github_version.py /home/builder/nvchecker
          [ -f ${GITHUB_WORKSPACE}/github_json.sh ] && \
            cp ${GITHUB_WORKSPACE}/github_json.sh /home/builder/nvchecker

          mapfile -t LOCALCHANGES < <(/home/builder/nvchecker/github_json.sh ${AUR_MAINTAINER_NAME} "${GITHUB_WORKSPACE}")
          echo '[debug] differences from local to AUR'
          printf '%s\n' "${LOCALCHANGES[@]}"
          cat combined.json

          FILES=$(find $GITHUB_WORKSPACE -name ".nvchecker.toml")
          echo '[__config__]' > new.toml
          echo -e "oldver='oldver.json'" >> new.toml
          echo -e "newver='newver.json'\n" >> new.toml

          for FILE in $FILES; do
            cat "$FILE" >> new.toml
            echo -e "\n" >> new.toml
          done
          cat new.toml
          curHOME=$HOME
          HOME=/home/builder
          nvchecker -c new.toml  --logger json > newver.json
          HOME=curHOME
          ls -latr newver.json oldver.json new.toml
          cat newver.json
          nvcmp -c new.toml
          readarray -t UPDATES < <(nvcmp -c new.toml -q)
          cd $GITHUB_WORKSPACE
          UNIQUEUPDATES=($(printf "%s\n" "${LOCALCHANGES[@]}" "${UPDATES[@]}" | sort -u))
          echo "LOCALCHANGES LIST:"
          printf '%s\n' "${LOCALCHANGES[@]}"
          echo "UPDATES LIST:"
          printf '%s\n' "${UPDATES[@]}"
          echo "UNIQUE LIST:"
          printf '%s\n' "${UNIQUEUPDATES[@]}"
          for foundpath in ${UNIQUEUPDATES[@]}; do
            subdirs=($(find . -maxdepth 3 -type d -name "${foundpath}"))
            if [ ${#subdirs[@]} -gt 1 ]; then
              echo "[debug] There are ${#subdirs[@]} subdirectories named '${foundpath}', expected exactly 1."
              exit 1
            elif [ ${#subdirs[@]} -eq 0 ]; then
              echo "[debug] There are ${#subdirs[@]} subdirectories named '${foundpath}'skipping ..."
            else
              echo "subdirs pre split: ${subdirs} without ./ = ${subdirs:2}"
              IFS='/' read -r -a _package <<< "${subdirs:2}"
              echo "[debug] Packages that will attempt to update:"
              printf '%s\n' "${UNIQUEUPDATES[@]}"
              maintain=${_package[0]}
              build=${_package[1]}
              package=${_package[2]}
              pkgbuild=${maintain}/${build}
              echo "Maintain: $maintain build: $build package: $package pkgbuild: $pkgbuild"
              if [ ${maintain} == "maintain" ]; then 
                sudo -u builder bash $GITHUB_WORKSPACE/buildscript.sh \
                  "${{ github.repository }}" "$GH_TOKEN" "$GITHUB_WORKSPACE" $build "$package" "${pkgbuild}/${package}" \
                  "Auto update $package "
              else
                echo "[debug] skipping $package as it's not in maintain directory"
              fi
            fi  

          done          
          
          # Example task execution
          echo "Task executed at: $(date)"
          
          # Example error handling
          if [ $? -ne 0 ]; then
              echo "Task failed!"
              exit 1
          fi
          
          echo "Task completed successfully!"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
