name: Arch Linux Task
on:
  schedule:
    - cron: '0 */12 * * *'  # Runs every 12 hours
  workflow_dispatch:  # Allows manual triggering

jobs:
  arch-task:
    runs-on: ubuntu-latest
    container:
      image: archlinux:latest
      options: --privileged

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize pacman keyring
        run: |
          # Initialize keyring with proper permissions
          mkdir -p /etc/pacman.d/gnupg
          pacman-key --init
          pacman-key --populate archlinux
          echo -e "\n[multilib]" >> /etc/pacman.conf
          echo "Include = /etc/pacman.d/mirrorlist" >> /etc/pacman.conf
          cat /etc/pacman.conf

          # Update system and install dependencies
          pacman -Sy --noconfirm --needed archlinux-keyring
          pacman -Syu --noconfirm
          pacman -S --noconfirm --needed git base-devel pacman-contrib \
          openssh github-cli jq expac ruby-rdoc ruby-pkg-config gnupg

      - name: Setup non-root user for AUR
        run: |
          # Create build user with sudo access
          useradd -m builder
          echo "builder ALL=(ALL) NOPASSWD: ALL" > /etc/sudoers.d/builder
          chmod 440 /etc/sudoers.d/builder

          # Create build directories with proper permissions
          install -d -m 755 /home/builder/.cache/paru
          install -d -m 755 /home/builder/.local/share/paru
          install -d -m 755 /home/builder/.gnupg
          chown -R builder:builder /home/builder

      - name: Install paru
        run: |
          cd /tmp
          sudo -u builder git clone https://aur.archlinux.org/paru-bin.git
          cd paru-bin
          sudo -u builder makepkg -si --noconfirm

          # Configure paru
          echo '[options]
          BatchInstall
          BottomUp
          RemoveMake
          SudoLoop
          UseAsk' | sudo tee /etc/paru.conf          


      - name: Run task
        run: |
          #!/bin/bash
          set -euo pipefail
          
          # Your task logic goes here
          echo "Starting task..."
          
          # Example environment setup
          cd $GITHUB_WORKSPACE
          find .
          
          # Example task execution
          echo "Task executed at: $(date)"
          
          # Example error handling
          if [ $? -ne 0 ]; then
              echo "Task failed!"
              exit 1
          fi
          
          echo "Task completed successfully!"