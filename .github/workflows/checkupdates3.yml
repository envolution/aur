name: Arch Linux Task - Test B (Initialize Pacman)
on:
  workflow_dispatch:

jobs:
  arch-task:
    runs-on: ubuntu-latest
    container:
      image: archlinux:latest
      options: --privileged
    env:
        AUR_MAINTAINER_NAME: envolution
        GIT_USERNAME: envolution
        GIT_EMAIL: involution@gmail.com
        ACTIONS_STEP_SUMMARY: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}#step:${{ github.job }}:markdown-summary
    steps:
      - name: Container Sanity Check
        shell: bash
        run: |
          echo "::notice title=Container Test::Inside archlinux container."
          echo "User: $(whoami)"
          echo "pwd: $(pwd)"
          echo "pacman --version"
          pacman --version || echo "pacman command not found or failed"

      - name: Initialize pacman keyring and update system
        run: |
          set -e 
          echo "::group::Initialize pacman and Update System"
          echo "Initializing pacman keyring..."
          mkdir -p /etc/pacman.d/gnupg
          pacman-key --init
          pacman-key --populate archlinux
          
          echo "Enabling multilib repository..."
          echo -e "\n[multilib]\nInclude = /etc/pacman.d/mirrorlist" >> /etc/pacman.conf
          
          echo "Updating system and installing core dependencies..."
          pacman -Sy --noconfirm --needed archlinux-keyring 
          pacman -Syu --noconfirm 
          
          echo "Installing necessary packages..."
          pacman -S --noconfirm --needed \
            git base-devel pacman-contrib openssh github-cli jq expac \
            ruby-rdoc ruby-pkg-config gnupg \
            python python-pip \
            pyalpm python-awesomeversion python-packaging python-lxml \
            python-gobject python-requests libnotify nvchecker \
            binutils multilib-devel python-aiohttp clang python-jq \
            sudo 
          echo "::endgroup::"

      - name: Setup non-root user for AUR operations
        shell: bash
        run: |
          set -e
          echo "::group::Setup non-root user 'builder'"
          echo "Creating build user 'builder'..."
          useradd -m -s /bin/bash builder 
          echo "builder ALL=(ALL) NOPASSWD: ALL" > /etc/sudoers.d/builder
          chmod 0440 /etc/sudoers.d/builder

          echo "Setting up directories for builder..."
          install -d -o builder -g builder -m 700 /home/builder/.gnupg 
          install -d -o builder -g builder -m 755 /home/builder/.cache
          install -d -o builder -g builder -m 755 /home/builder/.local
          install -d -o builder -g builder -m 755 /home/builder/.local/share
          install -d -o builder -g builder -m 755 /home/builder/.cache/paru
          install -d -o builder -g builder -m 755 /home/builder/.local/share/paru

          echo "Builder user setup complete."
          echo "::endgroup::"

      - name: Install paru (AUR helper)
        run: |
          set -e
          echo "::group::Install paru (AUR helper)"
          echo "Installing paru for 'builder' user..."
          cd /tmp
          sudo -u builder git clone https://aur.archlinux.org/paru-bin.git
          cd paru-bin
          sudo -u builder makepkg -si --noconfirm

          echo "Configuring paru..."
          echo -e "[options]\nBatchInstall\nBottomUp\nRemoveMake\nSudoLoop\nUseAsk" | sudo tee /etc/paru.conf > /dev/null
          
          echo "Paru installation and configuration complete."
          echo "::endgroup::"

      - name: Setup SSH key for AUR
        run: |
          set -e
          echo "::group::Setup SSH key for AUR"
          echo "Setting up SSH key for AUR access..."
          SSH_DIR="/home/builder/.ssh"
          mkdir -p "${SSH_DIR}"
          echo "${{ secrets.AUR_SSH_PRIVATE_KEY }}" > "${SSH_DIR}/aur"
          
          ssh-keyscan aur.archlinux.org >> "${SSH_DIR}/known_hosts"
          
          echo "Host aur.archlinux.org" >> "${SSH_DIR}/config"
          echo "  IdentityFile ${SSH_DIR}/aur" >> "${SSH_DIR}/config"
          echo "  User aur" >> "${SSH_DIR}/config" 
          echo "  StrictHostKeyChecking yes" >> "${SSH_DIR}/config"

          chown -R builder:builder "${SSH_DIR}"
          chmod 700 "${SSH_DIR}"
          chmod 600 "${SSH_DIR}/aur"
          chmod 600 "${SSH_DIR}/config" 
          chmod 644 "${SSH_DIR}/known_hosts"
          
          echo "SSH key setup complete. Permissions:"
          ls -ldn "${SSH_DIR}" "${SSH_DIR}/aur" "${SSH_DIR}/config" "${SSH_DIR}/known_hosts" # Use -n to show numeric UID/GID
          echo "::endgroup::"

      - name: Configure Git for builder user
        run: |
          set -e
          echo "::group::Configure Git for builder user"
          echo "Configuring Git for 'builder' user..."
          sudo -u builder git config --global user.name "${{ env.GIT_USERNAME }}"
          sudo -u builder git config --global user.email "${{ env.GIT_EMAIL }}"
          echo "Git configuration complete."
          echo "::endgroup::"

      - name: Load NVChecker Custom Source (if any)
        run: |
          set -e
          echo "::group::Load NVChecker Custom Source"
          CUSTOM_NV_SOURCE_SCRIPT="${GITHUB_WORKSPACE}/scripts/github-graphql.py"
          if [ -f "${CUSTOM_NV_SOURCE_SCRIPT}" ]; then
            SITE_PACKAGES_DIR=$(python3 -c "import site; print(site.getsitepackages()[0])")
            NVCHECKER_CUSTOM_SOURCE_DIR="${SITE_PACKAGES_DIR}/nvchecker_source"
            
            echo "::notice title=NVChecker Custom Source::Copying '${CUSTOM_NV_SOURCE_SCRIPT}' to '${NVCHECKER_CUSTOM_SOURCE_DIR}'..."
            mkdir -p "${NVCHECKER_CUSTOM_SOURCE_DIR}" 
            cp "${CUSTOM_NV_SOURCE_SCRIPT}" "${NVCHECKER_CUSTOM_SOURCE_DIR}/"
            echo "Custom NVChecker source loaded."
          else
            echo "::notice title=NVChecker Custom Source::Script not found at '${CUSTOM_NV_SOURCE_SCRIPT}'. Skipping."
          fi
          echo "::endgroup::"

      - name: Run Arch Package Update and Build Task # Problematic Step
        shell: bash
        run: |
          #!/bin/bash
          #
          # !!! EXTREME DEBUGGING ENABLED !!!
          # 'set -x' will print every command as it's executed.
          # 'set -e' exits on error.
          # 'set -u' exits on unbound variable.
          # 'set -o pipefail' exits if any command in a pipeline fails.
          #
          set -xeuo pipefail 
          echo "::notice title=SCRIPT_START::Bash script for 'Run Arch Package Update and Build Task' started. set -xeuo pipefail active."

          # --- Helper Functions with GitHub Actions Workflow Commands (Definitions Only) ---
          # These definitions themselves are unlikely to fail, but we define them for later use.
          _log_raw_debug() { echo "::debug::$1"; }
          _log_raw_notice() { echo "::notice title=$1::$2"; }
          _log_raw_error() { echo "::error title=$1::$2"; }
          _start_raw_group() { echo "::group::$1"; }
          _end_raw_group() { echo "::endgroup::"; }

          _log_raw_notice "HELPER_DEF" "Helper functions defined."

          # --- Configuration & Constants ---
          _log_raw_notice "VARS_START" "Defining initial constants..."
          BUILDER_HOME="/home/builder"
          _log_raw_debug "BUILDER_HOME='${BUILDER_HOME}'"

          NVCHECKER_RUN_DIR="${BUILDER_HOME}/nvchecker-run" 
          _log_raw_debug "NVCHECKER_RUN_DIR='${NVCHECKER_RUN_DIR}'"
          
          ARTIFACTS_DIR="${GITHUB_WORKSPACE}/artifacts"
          _log_raw_debug "ARTIFACTS_DIR='${ARTIFACTS_DIR}'"
          
          PACKAGE_DETAILS_JSON_PATH="${NVCHECKER_RUN_DIR}/package_details.json" 
          _log_raw_debug "PACKAGE_DETAILS_JSON_PATH='${PACKAGE_DETAILS_JSON_PATH}'"
          _log_raw_notice "VARS_END" "Initial constants defined."

          # --- Test setup_environment function ---
          setup_environment() {
              _start_raw_group "DEBUG: setup_environment Function"
              _log_raw_notice "SETUP_ENV_START" "Entering setup_environment function."
              
              _log_raw_debug "Running: sudo -u builder mkdir -p \"${NVCHECKER_RUN_DIR}\""
              sudo -u builder mkdir -p "${NVCHECKER_RUN_DIR}"
              _log_raw_debug "Finished: sudo -u builder mkdir -p \"${NVCHECKER_RUN_DIR}\". Exit code: $?"

              _log_raw_debug "Running: sudo -u builder mkdir -p \"${ARTIFACTS_DIR}\""
              sudo -u builder mkdir -p "${ARTIFACTS_DIR}"
              _log_raw_debug "Finished: sudo -u builder mkdir -p \"${ARTIFACTS_DIR}\". Exit code: $?"

              _log_raw_debug "Running: cd \"${NVCHECKER_RUN_DIR}\""
              cd "${NVCHECKER_RUN_DIR}"
              _log_raw_debug "Finished: cd \"${NVCHECKER_RUN_DIR}\". Current directory: $(pwd). Exit code: $?"

              _log_raw_notice "SETUP_ENV_COPY_SCRIPTS" "Copying necessary scripts..."
              for script_name_to_copy in "buildscript.py" "compare_aur_local_versions.py"; do
                  _log_raw_debug "Processing script: ${script_name_to_copy}"
                  local script_path_in_workspace="${GITHUB_WORKSPACE}/scripts/${script_name_to_copy}"
                  _log_raw_debug "Source path: ${script_path_in_workspace}"
                  
                  if [ ! -f "${script_path_in_workspace}" ]; then
                      _log_raw_error "SETUP_ENV_MISSING_SCRIPT" "Required script ${script_name_to_copy} not found at ${script_path_in_workspace}! This is FATAL for setup_environment."
                      # exit 1 # Exit here makes it clear this is the failure point
                  fi
                  _log_raw_debug "Script ${script_name_to_copy} exists at source."

                  _log_raw_debug "Running: sudo -u builder cp \"${script_path_in_workspace}\" \"${NVCHECKER_RUN_DIR}/\""
                  sudo -u builder cp "${script_path_in_workspace}" "${NVCHECKER_RUN_DIR}/"
                  _log_raw_debug "Finished: sudo -u builder cp for ${script_name_to_copy}. Exit code: $?"

                  _log_raw_debug "Running: sudo -u builder chmod +x \"${NVCHECKER_RUN_DIR}/${script_name_to_copy}\""
                  sudo -u builder chmod +x "${NVCHECKER_RUN_DIR}/${script_name_to_copy}"
                  _log_raw_debug "Finished: sudo -u builder chmod +x for ${script_name_to_copy}. Exit code: $?"
              done
              
              _log_raw_debug "Listing contents of ${NVCHECKER_RUN_DIR} after copy:"
              ls -la "${NVCHECKER_RUN_DIR}" | while IFS= read -r line; do _log_raw_debug "  ls: $line"; done

              _log_raw_notice "SETUP_ENV_END" "Exiting setup_environment function successfully."
              _end_raw_group
              return 0 # Explicitly return success
          }
          _log_raw_notice "SETUP_ENV_DEF_DONE" "setup_environment function defined."

          # --- Call only setup_environment for now ---
          _log_raw_notice "CALLING_SETUP_ENV" "Attempting to call setup_environment..."
          if setup_environment; then
            _log_raw_notice "CALL_SETUP_ENV_SUCCESS" "setup_environment function call SUCCEEDED."
          else
            _log_raw_error "CALL_SETUP_ENV_FAILED" "setup_environment function call FAILED. Exit code from function: $?. This is a critical failure."
            exit 1 # Ensure workflow fails if setup_environment fails
          fi

          _log_raw_notice "SCRIPT_PARTIAL_END" "Initial debugging script part finished successfully. If you see this, setup_environment worked."
          
          #
          # --- ALL OTHER FUNCTIONS AND MAIN CALL ARE TEMPORARILY OMITTED ---
          # e.g., generate_nvchecker_config, run_version_checks, get_package_updates_list,
          # extract_path_components, extract_pkgbuild_details, process_single_package_details,
          # execute_package_build_script, main()
          #
          # If the above works, you will start adding these back one by one.
          #
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Add other env vars from your job if they are needed by setup_environment directly,
          # though typically they are used later.
          # AUR_MAINTAINER_NAME: ${{ env.AUR_MAINTAINER_NAME }} # Example if needed by an early part
