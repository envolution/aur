name: Grouped NVCHECKER Updates
on:
  schedule:
    - cron: '0 */12 * * *'  # Runs every 12 hours
  workflow_dispatch:  # Allows manual triggering

jobs:
  arch-task:
    runs-on: ubuntu-latest
    container:
      image: archlinux:latest
      options: --privileged # Required for system-level changes like useradd, pacman
    env:
        AUR_MAINTAINER_NAME: envolution
        GIT_USERNAME: envolution
        GIT_EMAIL: involution@gmail.com
        # For GITHUB_STEP_SUMMARY
        ACTIONS_STEP_SUMMARY: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}#step:${{ github.job }}:markdown-summary

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize pacman keyring and update system
        run: |
          set -e 
          echo "::group::Initialize pacman and Update System"
          echo "Initializing pacman keyring..."
          mkdir -p /etc/pacman.d/gnupg
          pacman-key --init
          pacman-key --populate archlinux
          
          echo "Enabling multilib repository..."
          echo -e "\n[multilib]\nInclude = /etc/pacman.d/mirrorlist" >> /etc/pacman.conf
          
          echo "Updating system and installing core dependencies..."
          pacman -Sy --noconfirm --needed archlinux-keyring 
          pacman -Syu --noconfirm 
          
          echo "Installing necessary packages..."
          pacman -S --noconfirm --needed \
            git base-devel pacman-contrib openssh github-cli jq expac \
            ruby-rdoc ruby-pkg-config gnupg \
            python python-pip \
            pyalpm python-awesomeversion python-packaging python-lxml \
            python-gobject python-requests libnotify nvchecker \
            binutils multilib-devel python-aiohttp clang python-jq \
            sudo 
          echo "::endgroup::"

      - name: Setup non-root user for AUR operations
        shell: bash
        run: |
          set -e
          echo "::group::Setup non-root user 'builder'"
          echo "Creating build user 'builder'..."
          useradd -m -s /bin/bash builder 
          echo "builder ALL=(ALL) NOPASSWD: ALL" > /etc/sudoers.d/builder
          chmod 0440 /etc/sudoers.d/builder

          echo "Setting up directories for builder..."
          install -d -o builder -g builder -m 700 /home/builder/.gnupg 
          install -d -o builder -g builder -m 755 /home/builder/.cache
          install -d -o builder -g builder -m 755 /home/builder/.local
          install -d -o builder -g builder -m 755 /home/builder/.local/share
          install -d -o builder -g builder -m 755 /home/builder/.cache/paru
          install -d -o builder -g builder -m 755 /home/builder/.local/share/paru

          echo "Builder user setup complete."
          echo "::endgroup::"

      - name: Install paru (AUR helper)
        run: |
          set -e
          echo "::group::Install paru (AUR helper)"
          echo "Installing paru for 'builder' user..."
          cd /tmp
          sudo -u builder git clone https://aur.archlinux.org/paru-bin.git
          cd paru-bin
          sudo -u builder makepkg -si --noconfirm

          echo "Configuring paru..."
          echo -e "[options]\nBatchInstall\nBottomUp\nRemoveMake\nSudoLoop\nUseAsk" | sudo tee /etc/paru.conf > /dev/null
          
          echo "Paru installation and configuration complete."
          echo "::endgroup::"

      - name: Setup SSH key for AUR
        run: |
          set -e
          echo "::group::Setup SSH key for AUR"
          echo "Setting up SSH key for AUR access..."
          SSH_DIR="/home/builder/.ssh"
          mkdir -p "${SSH_DIR}"
          echo "${{ secrets.AUR_SSH_PRIVATE_KEY }}" > "${SSH_DIR}/aur"
          
          ssh-keyscan aur.archlinux.org >> "${SSH_DIR}/known_hosts"
          
          echo "Host aur.archlinux.org" >> "${SSH_DIR}/config"
          echo "  IdentityFile ${SSH_DIR}/aur" >> "${SSH_DIR}/config"
          echo "  User aur" >> "${SSH_DIR}/config" 
          echo "  StrictHostKeyChecking yes" >> "${SSH_DIR}/config"

          chown -R builder:builder "${SSH_DIR}"
          chmod 700 "${SSH_DIR}"
          chmod 600 "${SSH_DIR}/aur"
          chmod 600 "${SSH_DIR}/config" 
          chmod 644 "${SSH_DIR}/known_hosts"
          
          echo "SSH key setup complete. Permissions:"
          ls -ldn "${SSH_DIR}" "${SSH_DIR}/aur" "${SSH_DIR}/config" "${SSH_DIR}/known_hosts" # Use -n to show numeric UID/GID
          echo "::endgroup::"

      - name: Configure Git for builder user
        run: |
          set -e
          echo "::group::Configure Git for builder user"
          echo "Configuring Git for 'builder' user..."
          sudo -u builder git config --global user.name "${{ env.GIT_USERNAME }}"
          sudo -u builder git config --global user.email "${{ env.GIT_EMAIL }}"
          echo "Git configuration complete."
          echo "::endgroup::"

      - name: Run Arch Package Update and Build Task # Corrected ARTIFACTS_DIR creation
        shell: bash
        run: |
          #!/bin/bash
          set -xeuo pipefail 
          echo "::notice title=SCRIPT_START::Bash script for 'Run Arch Package Update and Build Task' started."

          # --- Helper Functions ---
          # ... (Keep your helper functions as they were) ...
          _log_raw_debug() { echo "::debug::$1"; }
          _log_raw_notice() { echo "::notice title=$1::$2"; }
          _log_raw_error() { echo "::error title=$1::$2"; }
          _start_raw_group() { echo "::group::$1"; }
          _end_raw_group() { echo "::endgroup::"; }
          _log_raw_notice "HELPER_DEF" "Helper functions defined."

          # --- Configuration & Constants ---
          _log_raw_notice "VARS_START" "Defining constants..."
          BUILDER_HOME="/home/builder"
          NVCHECKER_RUN_DIR="${BUILDER_HOME}/nvchecker-run"
          # ARTIFACTS_DIR will be created by root, then chowned if builder needs to write directly.
          # For now, buildscript.py (run as builder) will write to a subdir passed to it.
          # The main artifacts dir is created by root.
          ARTIFACTS_DIR="${GITHUB_WORKSPACE}/artifacts" 
          PACKAGE_DETAILS_JSON_PATH="${NVCHECKER_RUN_DIR}/package_details.json" 
          _log_raw_notice "VARS_END" "Constants defined."

          # --- setup_environment function ---
          setup_environment() {
              _start_raw_group "DEBUG: setup_environment"
              _log_raw_notice "SETUP_ENV_START" "PWD: $(pwd)"

              # Create NVCHECKER_RUN_DIR as builder (in builder's home)
              _log_raw_debug "Creating NVCHECKER_RUN_DIR as builder: ${NVCHECKER_RUN_DIR}"
              if ! sudo -u builder mkdir -p "${NVCHECKER_RUN_DIR}"; then
                  _log_raw_error "SETUP_ENV_FAIL" "Failed to mkdir -p ${NVCHECKER_RUN_DIR} as builder."
                  _end_raw_group; return 1
              fi

              # Create ARTIFACTS_DIR as root (current user of the script)
              _log_raw_debug "Creating ARTIFACTS_DIR as root: ${ARTIFACTS_DIR}"
              if ! mkdir -p "${ARTIFACTS_DIR}"; then # Script runs as root, so direct mkdir
                  _log_raw_error "SETUP_ENV_FAIL" "Failed to mkdir -p ${ARTIFACTS_DIR} as root."
                  _end_raw_group; return 1
              fi
              # If buildscript.py run as builder needs to create subdirs directly in ARTIFACTS_DIR root,
              # then chown ARTIFACTS_DIR to builder here.
              # However, buildscript.py is passed a full path like ARTIFACTS_DIR/packagename,
              # and it should create *that* specific packagename subdir.
              # The main ARTIFACTS_DIR can be root-owned for collection.
              # If builder *must* write to ARTIFACTS_DIR itself (not just subdirs it creates via sudo):
              # _log_raw_debug "Chown ARTIFACTS_DIR to builder..."
              # if ! chown builder:builder "${ARTIFACTS_DIR}"; then
              #     _log_raw_error "SETUP_ENV_FAIL" "Failed to chown ${ARTIFACTS_DIR} to builder."
              #    _end_raw_group; return 1
              # fi


              cd "${NVCHECKER_RUN_DIR}"; _log_raw_debug "Now in $(pwd)."
              local all_ok=true
              for script in "buildscript.py" "compare_aur_local_versions.py"; do
                  local path; path=$(find "${GITHUB_WORKSPACE}/scripts/" -name "${script}" -type f -print -quit 2>/dev/null)
                  if [ -n "${path}" ] && [ -f "${path}" ]; then
                      if sudo -u builder cp "${path}" ."/${script}" && sudo -u builder chmod +x ."/${script}"; then
                         _log_raw_debug "Copied & chmodded ${script}."
                      else _log_raw_error "SETUP_ENV_FAIL" "cp/chmod failed for ${script}"; all_ok=false; fi
                  else _log_raw_error "SETUP_ENV_MISSING" "${script} not found."; all_ok=false; fi
              done
              ls -la; if ! ${all_ok}; then _log_raw_error "SETUP_ENV_FINAL_FAIL" "Script setup failed."; _end_raw_group; return 1; fi
              _log_raw_notice "SETUP_ENV_END" "setup_environment SUCCEEDED."
              _end_raw_group; return 0 
          }

          # --- generate_nvchecker_config function ---
          # ... (Keep this function as it was in the previously successful version) ...
          generate_nvchecker_config() {
              _start_raw_group "DEBUG: generate_nvchecker_config"
              _log_raw_notice "NV_CONF_START" "Generating nvchecker config..."
              local cfg="new.toml"; local keyf="keyfile.toml"         
              echo "[__config__]" > "${cfg}"; echo "oldver = 'aur.json'" >> "${cfg}"; echo "newver = 'local.json'" >> "${cfg}" 
              echo "[keys]" > "${keyf}"; echo "github = '${{ secrets.GHuK }}'" >> "${keyf}"
              local indiv_cfg=(); mapfile -t indiv_cfg < <(find "${GITHUB_WORKSPACE}" -path "*/maintain/build/*/.nvchecker.toml" -type f -print)
              if [ ${#indiv_cfg[@]} -gt 0 ]; then
                  for cf in "${indiv_cfg[@]}"; do cat "${cf}" >> "${cfg}"; echo "" >> "${cfg}"; done
              else _log_raw_warning "NV_CONF_NO_INDIV" "No individual .nvchecker.toml found."; fi
              if ! chown builder:builder "${cfg}" "${keyf}"; then _log_raw_error "NV_CONF_CHOWN_FAIL" "chown FAILED. $?."; _end_raw_group; return 1; fi
              _log_raw_notice "NV_CONF_END" "generate_nvchecker_config SUCCEEDED."
              _end_raw_group; return 0
          }

          # --- run_compare_aur_local_versions (Placeholder for actual call) ---
          # ... (Keep this function as it was) ...
          run_compare_aur_local_versions() {
              _start_raw_group "DEBUG: run_compare_aur_local_versions"
              _log_raw_notice "COMPARE_AUR_START" "Running compare_aur_local_versions.py..."
              _log_raw_warning "COMPARE_AUR_DUMMY" "Creating dummy aur.json for this test run."
              echo "{ \"example-package\": { \"Name\": \"example-package\", \"Version\": \"1.0-1\" } }" | sudo -u builder tee aur.json > /dev/null
              if [ -f "aur.json" ]; then
                  _log_raw_notice "COMPARE_AUR_DUMMY_CREATED" "Dummy aur.json created."
                  sudo -u builder chown builder:builder aur.json 
              else
                  _log_raw_error "COMPARE_AUR_DUMMY_FAIL" "Failed to create dummy aur.json."
                  _end_raw_group; return 1
              fi
              _log_raw_notice "COMPARE_AUR_END" "compare_aur_local_versions (dummy) SUCCEEDED."
              _end_raw_group; return 0
          }

          # --- run_version_checks function ---
          # ... (Keep this function as it was) ...
          run_version_checks() {
              _start_raw_group "DEBUG: run_version_checks"
              _log_raw_notice "VER_CHECKS_START" "Running nvchecker & nvcmp..."
              if [ ! -f "new.toml" ] || [ ! -f "keyfile.toml" ]; then _log_raw_error "VER_CHECKS_MISSING" "new.toml/keyfile.toml missing!"; _end_raw_group; return 1; fi
              if [ ! -f "aur.json" ]; then _log_raw_error "VER_CHECKS_MISSING" "aur.json (from compare script) missing!"; _end_raw_group; return 1; fi

              local nvc_cmd="nvchecker -c new.toml -k keyfile.toml --logger json"
              if sudo -E -u builder bash -c "${nvc_cmd}" > local.json; then
                 _log_raw_debug "nvchecker OK. local.json content:"; cat local.json | while IFS= read -r line; do _log_raw_debug "  loc: $line"; done
              else _log_raw_error "VER_CHECKS_NVC_FAIL" "nvchecker FAILED $?."; _end_raw_group; return 1; fi
              
              local nvcmp_cmd="nvcmp -c new.toml"
              if sudo -E -u builder bash -c "${nvcmp_cmd}" > changes.json; then
                 _log_raw_debug "nvcmp OK. changes.json content:"; cat changes.json | while IFS= read -r line; do _log_raw_debug "  chg: $line"; done
              else _log_raw_error "VER_CHECKS_NVCMP_FAIL" "nvcmp FAILED $?."; _end_raw_group; return 1; fi
              _log_raw_notice "VER_CHECKS_END" "run_version_checks SUCCEEDED."
              _end_raw_group; return 0
          }
          
          # --- get_package_updates_list function (NEW) ---
          # ... (Keep this function as it was) ...
          get_package_updates_list() {
              _start_raw_group "DEBUG: get_package_updates_list"
              _log_raw_notice "GET_UPDATES_START" "Determining packages to update..."
              if [ ! -f "changes.json" ]; then _log_raw_error "GET_UPDATES_MISSING_CHANGES" "changes.json not found!"; _end_raw_group; return 1; fi
              if [ ! -f "new.toml" ]; then _log_raw_error "GET_UPDATES_MISSING_NEWTOML" "new.toml not found for nvcmp -q!"; _end_raw_group; return 1; fi

              local upgrades_from_changes=()
              local updates_from_nvcmp_q=()
              
              if [ -s "changes.json" ]; then 
                  mapfile -t upgrades_from_changes < <(jq -r 'to_entries | map(select(.value.status == "upgrade") | .key) | .[]' changes.json 2>/dev/null || true)
              else 
                  _log_raw_warning "GET_UPDATES_EMPTY_CHANGES" "changes.json is empty."
              fi
              _log_raw_debug "Packages with UPGRADES from changes.json (upstream > aur):"
              printf '  ::debug::  - %s\n' "${upgrades_from_changes[@]:-(none)}"
              
              mapfile -t updates_from_nvcmp_q < <(sudo -E -u builder nvcmp -c new.toml -q 2>/dev/null || true)
              _log_raw_debug "Packages with updates found directly by NVChecker (nvcmp -q):"
              printf '  ::debug::  - %s\n' "${updates_from_nvcmp_q[@]:-(none)}"
              
              local temp_updates_file; temp_updates_file=$(mktemp)
              printf '%s\n' "${upgrades_from_changes[@]:-}" > "$temp_updates_file"
              printf '%s\n' "${updates_from_nvcmp_q[@]:-}" >> "$temp_updates_file"
              
              mapfile -tG UPDATES < <(sort -u "$temp_updates_file") 
              rm "$temp_updates_file"

              _log_raw_notice "GET_UPDATES_FINAL_LIST" "Final list of packages to process for updates (UPDATES array):"
              if [ ${#UPDATES[@]} -eq 0 ]; then
                  _log_raw_notice "GET_UPDATES_NONE_FOUND" "  No packages require updates at this time."
              else
                  printf '  ::notice title=Update Candidate::%s\n' "${UPDATES[@]}"
              fi
              _log_raw_notice "GET_UPDATES_END" "Exiting get_package_updates_list successfully."
              _end_raw_group; return 0
          }

          # --- Main Execution Flow ---
          _log_raw_notice "MAIN_EXEC_START" "Starting main execution flow..."
          
          setup_environment
          generate_nvchecker_config
          run_compare_aur_local_versions 
          run_version_checks
          get_package_updates_list 

          _log_raw_notice "SCRIPT_PHASED_END" "Current test phase (up to get_package_updates_list) finished."
          
          # --- Subsequent functions OMITTED ---
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          AUR_MAINTAINER_NAME: ${{ env.AUR_MAINTAINER_NAME }}
