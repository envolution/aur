name: Grouped NVCHECKER Updates
on:
  schedule:
    - cron: '0 */12 * * *'  # Runs every 12 hours
  workflow_dispatch:  # Allows manual triggering

jobs:
  arch-task:
    runs-on: ubuntu-latest
    container:
      image: archlinux:latest
      options: --privileged # Required for system-level changes like useradd, pacman
    env:
        AUR_MAINTAINER_NAME: envolution
        GIT_USERNAME: envolution
        GIT_EMAIL: involution@gmail.com
        # For GITHUB_STEP_SUMMARY
        ACTIONS_STEP_SUMMARY: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}#step:${{ github.job }}:markdown-summary

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize pacman keyring and update system
        run: |
          set -e 
          echo "::group::Initialize pacman and Update System"
          echo "Initializing pacman keyring..."
          mkdir -p /etc/pacman.d/gnupg
          pacman-key --init
          pacman-key --populate archlinux
          
          echo "Enabling multilib repository..."
          echo -e "\n[multilib]\nInclude = /etc/pacman.d/mirrorlist" >> /etc/pacman.conf
          
          echo "Updating system and installing core dependencies..."
          pacman -Sy --noconfirm --needed archlinux-keyring 
          pacman -Syu --noconfirm 
          
          echo "Installing necessary packages..."
          pacman -S --noconfirm --needed \
            git base-devel pacman-contrib openssh github-cli jq expac \
            ruby-rdoc ruby-pkg-config gnupg \
            python python-pip \
            pyalpm python-awesomeversion python-packaging python-lxml \
            python-gobject python-requests libnotify nvchecker \
            binutils multilib-devel python-aiohttp clang python-jq \
            sudo 
          echo "::endgroup::"

      - name: Setup non-root user for AUR operations
        shell: bash
        run: |
          set -e
          echo "::group::Setup non-root user 'builder'"
          echo "Creating build user 'builder'..."
          useradd -m -s /bin/bash builder 
          echo "builder ALL=(ALL) NOPASSWD: ALL" > /etc/sudoers.d/builder
          chmod 0440 /etc/sudoers.d/builder

          echo "Setting up directories for builder..."
          install -d -o builder -g builder -m 700 /home/builder/.gnupg 
          install -d -o builder -g builder -m 755 /home/builder/.cache
          install -d -o builder -g builder -m 755 /home/builder/.local
          install -d -o builder -g builder -m 755 /home/builder/.local/share
          install -d -o builder -g builder -m 755 /home/builder/.cache/paru
          install -d -o builder -g builder -m 755 /home/builder/.local/share/paru

          echo "Builder user setup complete."
          echo "::endgroup::"

      - name: Install paru (AUR helper)
        run: |
          set -e
          echo "::group::Install paru (AUR helper)"
          echo "Installing paru for 'builder' user..."
          cd /tmp
          sudo -u builder git clone https://aur.archlinux.org/paru-bin.git
          cd paru-bin
          sudo -u builder makepkg -si --noconfirm

          echo "Configuring paru..."
          echo -e "[options]\nBatchInstall\nBottomUp\nRemoveMake\nSudoLoop\nUseAsk" | sudo tee /etc/paru.conf > /dev/null
          
          echo "Paru installation and configuration complete."
          echo "::endgroup::"

      - name: Setup SSH key for AUR
        run: |
          set -e
          echo "::group::Setup SSH key for AUR"
          echo "Setting up SSH key for AUR access..."
          SSH_DIR="/home/builder/.ssh"
          mkdir -p "${SSH_DIR}"
          echo "${{ secrets.AUR_SSH_PRIVATE_KEY }}" > "${SSH_DIR}/aur"
          
          ssh-keyscan aur.archlinux.org >> "${SSH_DIR}/known_hosts"
          
          echo "Host aur.archlinux.org" >> "${SSH_DIR}/config"
          echo "  IdentityFile ${SSH_DIR}/aur" >> "${SSH_DIR}/config"
          echo "  User aur" >> "${SSH_DIR}/config" 
          echo "  StrictHostKeyChecking yes" >> "${SSH_DIR}/config"

          chown -R builder:builder "${SSH_DIR}"
          chmod 700 "${SSH_DIR}"
          chmod 600 "${SSH_DIR}/aur"
          chmod 600 "${SSH_DIR}/config" 
          chmod 644 "${SSH_DIR}/known_hosts"
          
          echo "SSH key setup complete. Permissions:"
          ls -ldn "${SSH_DIR}" "${SSH_DIR}/aur" "${SSH_DIR}/config" "${SSH_DIR}/known_hosts" # Use -n to show numeric UID/GID
          echo "::endgroup::"

      - name: Configure Git for builder user
        run: |
          set -e
          echo "::group::Configure Git for builder user"
          echo "Configuring Git for 'builder' user..."
          sudo -u builder git config --global user.name "${{ env.GIT_USERNAME }}"
          sudo -u builder git config --global user.email "${{ env.GIT_EMAIL }}"
          echo "Git configuration complete."
          echo "::endgroup::"

      - name: Run Arch Package Update and Build Task # Standardize Log Func Calls
        shell: bash
        run: |
          #!/bin/bash
          set -euo pipefail 
          echo "::notice title=SCRIPT_START::Arch Package Update Task started."

          # --- Helper Functions ---
          _log_notice() { echo "::notice title=$1::$2"; }
          _log_error() { echo "::error title=$1::$2"; }
          _log_warning() { echo "::warning title=$1::$2"; }
          _log_debug() { echo "::debug::$1"; } # Changed from _log_debug_verbose for more general use
          _start_group() { echo "::group::$1"; }
          _end_group() { echo "::endgroup::"; } # Standardized name
          _log_notice "HELPER_DEF" "Helper functions defined."

          # --- Configuration & Constants ---
          _log_notice "VARS_CONSTANTS" "Defining constants..."
          BUILDER_HOME="/home/builder"; NVCHECKER_RUN_DIR="${BUILDER_HOME}/nvchecker-run"; ARTIFACTS_DIR="${GITHUB_WORKSPACE}/artifacts"; PACKAGE_DETAILS_JSON_PATH="${NVCHECKER_RUN_DIR}/package_details.json" 
          _log_notice "VARS_CONSTANTS" "BUILDER_HOME=${BUILDER_HOME}, NVCHECKER_RUN_DIR=${NVCHECKER_RUN_DIR}"


          # --- Function Definitions ---
          setup_environment() {
              _start_group "Setup Environment"
              _log_notice "SETUP_ENV" "Configuring environment in ${NVCHECKER_RUN_DIR}..."
              if ! sudo -u builder mkdir -p "${NVCHECKER_RUN_DIR}"; then _log_error "SETUP_FAIL" "mkdir NVCHECKER_RUN_DIR failed."; _end_group; return 1; fi
              if ! mkdir -p "${ARTIFACTS_DIR}"; then _log_error "SETUP_FAIL" "mkdir ARTIFACTS_DIR failed."; _end_group; return 1; fi
              cd "${NVCHECKER_RUN_DIR}"
              _log_debug "Now in $(pwd)."
              
              local all_ok=true
              for script_to_copy in "buildscript.py" "compare_aur_local_versions.py"; do 
                  local script_source_path; script_source_path=$(find "${GITHUB_WORKSPACE}/scripts/" -name "${script_to_copy}" -type f -print -quit 2>/dev/null)
                  if [ -n "${script_source_path}" ] && [ -f "${script_source_path}" ]; then
                      if sudo -u builder cp "${script_source_path}" "./${script_to_copy}" && sudo -u builder chmod +x "./${script_to_copy}"; then
                         _log_debug "Copied & chmodded ${script_to_copy} to $(pwd)."
                      else _log_error "SETUP_FAIL" "cp/chmod failed for ${script_to_copy}."; all_ok=false; fi
                  else _log_error "SETUP_FAIL" "${script_to_copy} not found in ${GITHUB_WORKSPACE}/scripts/."; all_ok=false; fi
              done
              
              if ! ${all_ok}; then _log_error "SETUP_ENV_FINAL_FAIL" "Script setup failed."; _end_group; return 1; fi
              _log_notice "SETUP_ENV" "Environment setup SUCCEEDED."
              _end_group; return 0 
          }

          generate_nvchecker_config() {
              _start_group "Generate NVChecker Configuration"
              _log_notice "NV_CONF" "Generating nvchecker config files (new.toml, keyfile.toml)..."
              local cfg="new.toml"; local keyf="keyfile.toml"         
              echo "[__config__]" > "${cfg}"; echo "oldver = 'aur.json'" >> "${cfg}"; echo "newver = 'local.json'" >> "${cfg}" 
              echo "[keys]" > "${keyf}"; echo "github = '${{ secrets.GHuK }}'" >> "${keyf}" # GHuK is GitHub token
              
              local individual_configs=(); mapfile -t individual_configs < <(find "${GITHUB_WORKSPACE}" -path "*/maintain/build/*/.nvchecker.toml" -type f -print)
              if [ ${#individual_configs[@]} -gt 0 ]; then
                  _log_debug "Appending ${#individual_configs[@]} individual .nvchecker.toml files."
                  for cf in "${individual_configs[@]}"; do cat "${cf}" >> "${cfg}"; echo "" >> "${cfg}"; done
              else _log_warning "NV_CONF" "No individual .nvchecker.toml files found to append."; fi
              
              if ! chown builder:builder "${cfg}" "${keyf}"; then _log_error "NV_CONF_FAIL" "chown for ${cfg}/${keyf} FAILED. Exit: $?."; _end_group; return 1; fi
              _log_notice "NV_CONF" "NVChecker configuration generated successfully."
              _end_group; return 0
          }

          run_compare_aur_local_versions() {
              _start_group "Compare AUR vs Local Versions (Generates aur.json)"
              _log_notice "COMPARE_AUR" "Running compare_aur_local_versions.py..."
              local script="./compare_aur_local_versions.py"
              local outfile="aur.json" 

              if [ ! -f "${script}" ]; then _log_error "COMPARE_AUR_FAIL" "${script} not found in $(pwd)!"; _end_group; return 1; fi
              
              _log_debug "Executing: sudo -E -u builder python3 ${script} --maintainer ${AUR_MAINTAINER_NAME} --repo-root ${GITHUB_WORKSPACE}"
              local stderr_log; stderr_log=$(mktemp)
              if sudo -E -u builder python3 "${script}" \
                  --maintainer "${AUR_MAINTAINER_NAME}" \
                  --repo-root "${GITHUB_WORKSPACE}" \
                  2> "${stderr_log}"; then # Python script creates aur.json (and others) in CWD
                  
                  if [ -s "${outfile}" ]; then 
                     _log_notice "COMPARE_AUR" "${outfile} generated successfully (Size: $(wc -c < "${outfile}") bytes)."
                     _log_debug "aur.json Head: $(head -n 5 "${outfile}")"
                     if ! sudo -u builder chown builder:builder aur.json local.json changes.json combined.json 2>/dev/null; then 
                         _log_warning "COMPARE_AUR" "Could not chown one or more output files to builder (may be okay)."
                     fi
                  else 
                     _log_warning "COMPARE_AUR" "${outfile} was expected but is empty or not found after script run. Check python script logic."
                     if [ -s "${stderr_log}" ]; then
                        _log_warning "COMPARE_AUR_PY_STDERR" "Stderr from python script (despite exit 0):"
                        cat "${stderr_log}" | while IFS= read -r line; do _log_warning "PY_STDERR_LINE" "  $line"; done
                     fi
                  fi
              else
                  local exit_c=$?
                  _log_error "COMPARE_AUR_FAIL" "compare_aur_local_versions.py FAILED (Exit: ${exit_c}). Stderr:"
                  cat "${stderr_log}" | while IFS= read -r line; do _log_error "PYTHON_STDERR" "  $line"; done
                  rm "${stderr_log}"; _end_group; return 1
              fi
              rm "${stderr_log}"
              _log_notice "COMPARE_AUR" "compare_aur_local_versions.py SUCCEEDED."
              _end_group; return 0
          }

          run_version_checks() {
              _start_group "Run Version Checks (nvchecker, nvcmp)"
              _log_notice "VER_CHECKS" "Running nvchecker & nvcmp..."
              if [ ! -f "new.toml" ] || [ ! -f "keyfile.toml" ] || [ ! -f "aur.json" ]; then 
                  _log_error "VER_CHECKS_FAIL" "Missing new.toml, keyfile.toml, or aur.json for version checks."; _end_group; return 1; 
              fi

              _log_debug "Running nvchecker..."
              if sudo -E -u builder nvchecker -c new.toml -k keyfile.toml --logger json > local.json; then
                 _log_notice "VER_CHECKS" "nvchecker OK. local.json size: $(wc -c < local.json) bytes."
                 _log_debug "local.json Head: $(head -n 5 local.json)"
              else _log_error "VER_CHECKS_FAIL" "nvchecker FAILED (Exit: $?)."; _end_group; return 1; fi
              
              _log_debug "Running nvcmp..."
              # Ensure changes.json is builder-owned if created by builder
              if sudo -E -u builder nvcmp -c new.toml > changes.json; then
                 # sudo -u builder chown builder:builder changes.json # If needed, but output redirection might make it root owned
                 # It's better if nvcmp output can be tee'd to a builder owned file like so:
                 # sudo -E -u builder nvcmp -c new.toml | sudo -u builder tee changes.json > /dev/null
                 # For now, let's assume output redirection creates it as root, and jq (run as root) can read it.
                 _log_notice "VER_CHECKS" "nvcmp OK. changes.json size: $(wc -c < changes.json) bytes."
                 _log_debug "changes.json Head: $(head -n 5 changes.json)"
              else _log_error "VER_CHECKS_FAIL" "nvcmp FAILED (Exit: $?)."; _end_group; return 1; fi
              _log_notice "VER_CHECKS" "Version checks (nvchecker, nvcmp) SUCCEEDED."
              _end_group; return 0
          }
          
          get_package_updates_list() {
              _start_group "Get Package Updates List"
              _log_notice "GET_UPDATES" "Determining packages to update from changes.json and nvcmp -q..."
              if [ ! -f "changes.json" ] || [ ! -f "new.toml" ]; then 
                  _log_error "GET_UPDATES_FAIL" "Missing changes.json or new.toml."; _end_group; return 1; 
              fi

              local upgrades_from_changes=() 
              local updates_from_nvcmp_q=()
              
              if [ -s "changes.json" ]; then 
                  local jq_err_log; jq_err_log=$(mktemp)
                  _log_debug "Parsing changes.json with jq..."
                  if mapfile -t upgrades_from_changes < <(jq -r 'to_entries | map(select(.value.status == "upgrade") | .key) | .[]' changes.json 2> "${jq_err_log}"); then
                      _log_debug "jq parsed changes.json successfully."
                  else
                      _log_warning "GET_UPDATES" "jq command for changes.json may have failed (Exit: $?). Stderr:"
                      cat "${jq_err_log}" | while IFS= read -r line; do _log_warning "JQ_STDERR" "  $line"; done
                  fi
                  rm "${jq_err_log}"
              else _log_warning "GET_UPDATES" "changes.json is empty."; fi
              _log_debug "Found ${#upgrades_from_changes[@]} upgrades from changes.json."
              
              _log_debug "Running nvcmp -q..."
              mapfile -t updates_from_nvcmp_q < <(sudo -E -u builder nvcmp -c new.toml -q 2>/dev/null || true)
              _log_debug "Found ${#updates_from_nvcmp_q[@]} updates from nvcmp -q."
              
              local temp_file; temp_file=$(mktemp)
              printf '%s\n' "${upgrades_from_changes[@]:-}" > "${temp_file}"
              printf '%s\n' "${updates_from_nvcmp_q[@]:-}" >> "${temp_file}"
              
              declare -ga UPDATES 
              mapfile -t UPDATES < <(sort -u "${temp_file}") 
              rm "${temp_file}"

              if [ ${#UPDATES[@]} -eq 0 ]; then
                  _log_notice "GET_UPDATES" "No packages require updates."
              else
                  _log_notice "GET_UPDATES" "Found ${#UPDATES[@]} package(s) to update:"
                  printf '  ::notice title=Update Candidate::%s\n' "${UPDATES[@]}"
              fi
              _log_notice "GET_UPDATES" "Package update list generation SUCCEEDED."
              _end_group; return 0
          }

          # --- Main Execution Flow ---
          _log_notice "MAIN_EXEC" "Starting main execution flow..."
          
          if ! setup_environment; then _log_error "MAIN_FAIL" "setup_environment FAILED."; exit 1; fi
          if ! generate_nvchecker_config; then _log_error "MAIN_FAIL" "generate_nvchecker_config FAILED."; exit 1; fi
          if ! run_compare_aur_local_versions; then _log_error "MAIN_FAIL" "run_compare_aur_local_versions FAILED."; exit 1; fi
          if ! run_version_checks; then _log_error "MAIN_FAIL" "run_version_checks FAILED."; exit 1; fi
          if ! get_package_updates_list; then _log_error "MAIN_FAIL" "get_package_updates_list FAILED."; exit 1; fi

          _log_notice "MAIN_EXEC" "All pre-build phases completed successfully."
          _log_notice "SCRIPT_PHASED_END" "Current test phase (up to get_package_updates_list) finished."
          
          # --- extract_components, extract_pkgbuild_details, process_package_dependencies, build_package OMITTED ---
          # --- Actual main() loop for processing UPDATES OMITTED ---
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          AUR_MAINTAINER_NAME: ${{ env.AUR_MAINTAINER_NAME }} 
          # GHuK is referenced as a secret in generate_nvchecker_config
