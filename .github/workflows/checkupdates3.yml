name: Grouped NVCHECKER Updates
on:
  schedule:
    - cron: '0 */12 * * *'  # Runs every 12 hours
  workflow_dispatch:  # Allows manual triggering

jobs:
  arch-task:
    runs-on: ubuntu-latest
    container:
      image: archlinux:latest
      options: --privileged # Required for system-level changes like useradd, pacman
    env:
        AUR_MAINTAINER_NAME: envolution
        GIT_USERNAME: envolution
        GIT_EMAIL: involution@gmail.com
        # For GITHUB_STEP_SUMMARY
        ACTIONS_STEP_SUMMARY: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}#step:${{ github.job }}:markdown-summary

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize pacman keyring and update system
        run: |
          set -e 
          echo "::group::Initialize pacman and Update System"
          echo "Initializing pacman keyring..."
          mkdir -p /etc/pacman.d/gnupg
          pacman-key --init
          pacman-key --populate archlinux
          
          echo "Enabling multilib repository..."
          echo -e "\n[multilib]\nInclude = /etc/pacman.d/mirrorlist" >> /etc/pacman.conf
          
          echo "Updating system and installing core dependencies..."
          pacman -Sy --noconfirm --needed archlinux-keyring 
          pacman -Syu --noconfirm 
          
          echo "Installing necessary packages..."
          pacman -S --noconfirm --needed \
            git base-devel pacman-contrib openssh github-cli jq expac \
            ruby-rdoc ruby-pkg-config gnupg \
            python python-pip \
            pyalpm python-awesomeversion python-packaging python-lxml \
            python-gobject python-requests libnotify nvchecker \
            binutils multilib-devel python-aiohttp clang python-jq \
            sudo 
          echo "::endgroup::"

      - name: Setup non-root user for AUR operations
        shell: bash
        run: |
          set -e
          echo "::group::Setup non-root user 'builder'"
          echo "Creating build user 'builder'..."
          useradd -m -s /bin/bash builder 
          echo "builder ALL=(ALL) NOPASSWD: ALL" > /etc/sudoers.d/builder
          chmod 0440 /etc/sudoers.d/builder

          echo "Setting up directories for builder..."
          install -d -o builder -g builder -m 700 /home/builder/.gnupg 
          install -d -o builder -g builder -m 755 /home/builder/.cache
          install -d -o builder -g builder -m 755 /home/builder/.local
          install -d -o builder -g builder -m 755 /home/builder/.local/share
          install -d -o builder -g builder -m 755 /home/builder/.cache/paru
          install -d -o builder -g builder -m 755 /home/builder/.local/share/paru

          echo "Builder user setup complete."
          echo "::endgroup::"

      - name: Install paru (AUR helper)
        run: |
          set -e
          echo "::group::Install paru (AUR helper)"
          echo "Installing paru for 'builder' user..."
          cd /tmp
          sudo -u builder git clone https://aur.archlinux.org/paru-bin.git
          cd paru-bin
          sudo -u builder makepkg -si --noconfirm

          echo "Configuring paru..."
          echo -e "[options]\nBatchInstall\nBottomUp\nRemoveMake\nSudoLoop\nUseAsk" | sudo tee /etc/paru.conf > /dev/null
          
          echo "Paru installation and configuration complete."
          echo "::endgroup::"

      - name: Setup SSH key for AUR
        run: |
          set -e
          echo "::group::Setup SSH key for AUR"
          echo "Setting up SSH key for AUR access..."
          SSH_DIR="/home/builder/.ssh"
          mkdir -p "${SSH_DIR}"
          echo "${{ secrets.AUR_SSH_PRIVATE_KEY }}" > "${SSH_DIR}/aur"
          
          ssh-keyscan aur.archlinux.org >> "${SSH_DIR}/known_hosts"
          
          echo "Host aur.archlinux.org" >> "${SSH_DIR}/config"
          echo "  IdentityFile ${SSH_DIR}/aur" >> "${SSH_DIR}/config"
          echo "  User aur" >> "${SSH_DIR}/config" 
          echo "  StrictHostKeyChecking yes" >> "${SSH_DIR}/config"

          chown -R builder:builder "${SSH_DIR}"
          chmod 700 "${SSH_DIR}"
          chmod 600 "${SSH_DIR}/aur"
          chmod 600 "${SSH_DIR}/config" 
          chmod 644 "${SSH_DIR}/known_hosts"
          
          echo "SSH key setup complete. Permissions:"
          ls -ldn "${SSH_DIR}" "${SSH_DIR}/aur" "${SSH_DIR}/config" "${SSH_DIR}/known_hosts" # Use -n to show numeric UID/GID
          echo "::endgroup::"

      - name: Configure Git for builder user
        run: |
          set -e
          echo "::group::Configure Git for builder user"
          echo "Configuring Git for 'builder' user..."
          sudo -u builder git config --global user.name "${{ env.GIT_USERNAME }}"
          sudo -u builder git config --global user.email "${{ env.GIT_EMAIL }}"
          echo "Git configuration complete."
          echo "::endgroup::"

      - name: Load NVChecker Custom Source (if any)
        run: |
          set -e
          echo "::group::Load NVChecker Custom Source"
          CUSTOM_NV_SOURCE_SCRIPT="${GITHUB_WORKSPACE}/scripts/github-graphql.py"
          if [ -f "${CUSTOM_NV_SOURCE_SCRIPT}" ]; then
            SITE_PACKAGES_DIR=$(python3 -c "import site; print(site.getsitepackages()[0])")
            NVCHECKER_CUSTOM_SOURCE_DIR="${SITE_PACKAGES_DIR}/nvchecker_source"
            
            echo "::notice title=NVChecker Custom Source::Copying '${CUSTOM_NV_SOURCE_SCRIPT}' to '${NVCHECKER_CUSTOM_SOURCE_DIR}'..."
            mkdir -p "${NVCHECKER_CUSTOM_SOURCE_DIR}" 
            cp "${CUSTOM_NV_SOURCE_SCRIPT}" "${NVCHECKER_CUSTOM_SOURCE_DIR}/"
            echo "Custom NVChecker source loaded."
          else
            echo "::notice title=NVChecker Custom Source::Script not found at '${CUSTOM_NV_SOURCE_SCRIPT}'. Skipping."
          fi
          echo "::endgroup::"


      - name: Run Arch Package Update and Build Task # Test run_version_checks
        shell: bash
        run: |
          #!/bin/bash
          set -xeuo pipefail 
          echo "::notice title=SCRIPT_START::Bash script for 'Run Arch Package Update and Build Task' started. set -xeuo pipefail active."

          # --- Helper Functions (Definitions Only) ---
          _log_raw_debug() { echo "::debug::$1"; }
          _log_raw_notice() { echo "::notice title=$1::$2"; }
          _log_raw_error() { echo "::error title=$1::$2"; }
          _start_raw_group() { echo "::group::$1"; }
          _end_raw_group() { echo "::endgroup::"; }
          _log_raw_notice "HELPER_DEF" "Helper functions defined."

          # --- Configuration & Constants ---
          _log_raw_notice "VARS_START" "Defining initial constants..."
          BUILDER_HOME="/home/builder"
          NVCHECKER_RUN_DIR="${BUILDER_HOME}/nvchecker-run" 
          ARTIFACTS_DIR="${GITHUB_WORKSPACE}/artifacts"
          PACKAGE_DETAILS_JSON_PATH="${NVCHECKER_RUN_DIR}/package_details.json" 
          _log_raw_notice "VARS_END" "Initial constants defined." # For brevity, removed individual var logs

          # --- setup_environment function ---
          setup_environment() {
              _start_raw_group "DEBUG: setup_environment Function"
              _log_raw_notice "SETUP_ENV_START" "Entering setup_environment function. Current PWD: $(pwd)"
              sudo -u builder mkdir -p "${NVCHECKER_RUN_DIR}"
              sudo -u builder mkdir -p "${ARTIFACTS_DIR}"
              cd "${NVCHECKER_RUN_DIR}"
              _log_raw_debug "Current directory after cd: $(pwd)."
              local all_scripts_found_and_copied=true
              for script_name_to_copy in "buildscript.py" "compare_aur_local_versions.py"; do
                  local found_script_path
                  found_script_path=$(find "${GITHUB_WORKSPACE}/scripts/" -name "${script_name_to_copy}" -type f -print -quit 2>/dev/null)
                  if [ -n "${found_script_path}" ] && [ -f "${found_script_path}" ]; then
                      _log_raw_notice "SETUP_ENV_SCRIPT_FOUND" "Script '${script_name_to_copy}' FOUND at '${found_script_path}'."
                      if sudo -u builder cp "${found_script_path}" "${NVCHECKER_RUN_DIR}/"; then
                          if ! sudo -u builder chmod +x "${NVCHECKER_RUN_DIR}/${script_name_to_copy}"; then
                             _log_raw_error "SETUP_ENV_CHMOD_FAILED" "chmod +x FAILED for '${NVCHECKER_RUN_DIR}/${script_name_to_copy}'. Exit code: $?."
                             all_scripts_found_and_copied=false
                          fi
                      else
                          _log_raw_error "SETUP_ENV_COPY_FAILED" "cp FAILED for ${script_name_to_copy}. Exit code: $?."
                          all_scripts_found_and_copied=false
                      fi
                  else
                      _log_raw_error "SETUP_ENV_MISSING_SCRIPT" "Script '${script_name_to_copy}' NOT FOUND in '${GITHUB_WORKSPACE}/scripts/'."
                      all_scripts_found_and_copied=false
                  fi
              done
              ls -la "${NVCHECKER_RUN_DIR}" | while IFS= read -r line; do _log_raw_debug "  ls dest: $line"; done
              if ! ${all_scripts_found_and_copied}; then
                  _log_raw_error "SETUP_ENV_FINAL_FAILURE" "CRITICAL: Script setup failed."
                  _end_raw_group; return 1 
              fi
              _log_raw_notice "SETUP_ENV_END" "Exiting setup_environment successfully."
              _end_raw_group; return 0 
          }
          _log_raw_notice "SETUP_ENV_DEF_DONE" "setup_environment defined."

          # --- generate_nvchecker_config function ---
          generate_nvchecker_config() {
              _start_raw_group "DEBUG: generate_nvchecker_config Function"
              _log_raw_notice "NVCHECKER_CONFIG_START" "Entering generate_nvchecker_config."
              local combined_config_file="new.toml"; local keyfile="keyfile.toml"         
              echo "[__config__]" > "${combined_config_file}"; echo "oldver = 'aur.json'" >> "${combined_config_file}"; echo "newver = 'local.json'" >> "${combined_config_file}" 
              echo "[keys]" > "${keyfile}"; echo "github = '${{ secrets.GHuK }}'" >> "${keyfile}"
              _log_raw_notice "NVCHECKER_CONFIG_APPEND" "Appending individual .nvchecker.toml files..."
              local individual_nvchecker_configs=(); mapfile -t individual_nvchecker_configs < <(find "${GITHUB_WORKSPACE}" -path "*/maintain/build/*/.nvchecker.toml" -type f -print)
              if [ ${#individual_nvchecker_configs[@]} -gt 0 ]; then
                  for conf_file in "${individual_nvchecker_configs[@]}"; do cat "${conf_file}" >> "${combined_config_file}"; echo "" >> "${combined_config_file}"; done
              else _log_raw_warning "NVCHECKER_CONFIG_NO_INDIVIDUAL_FILES" "No individual .nvchecker.toml files found."; fi
              if chown builder:builder "${combined_config_file}" "${keyfile}"; then
                 _log_raw_debug "Ownership change SUCCESS for nvchecker config files."
              else _log_raw_error "NVCHECKER_CONFIG_CHOWN_FAILED" "chown FAILED. $?."; _end_raw_group; return 1; fi
              _log_raw_notice "NVCHECKER_CONFIG_END" "Exiting generate_nvchecker_config successfully."
              _end_raw_group; return 0
          }
          _log_raw_notice "NVCHECKER_CONFIG_DEF_DONE" "generate_nvchecker_config defined."

          # --- run_version_checks function ---
          run_version_checks() {
              _start_raw_group "DEBUG: run_version_checks Function"
              _log_raw_notice "VERSION_CHECKS_START" "Entering run_version_checks function."
              # Current directory should be NVCHECKER_RUN_DIR (/home/builder/nvchecker-run)
              _log_raw_debug "Current directory for version checks: $(pwd)"
              _log_raw_debug "Verifying required files: new.toml, keyfile.toml"
              if [ ! -f "new.toml" ]; then _log_raw_error "VERSION_CHECKS_MISSING_FILE" "new.toml not found!"; _end_raw_group; return 1; fi
              if [ ! -f "keyfile.toml" ]; then _log_raw_error "VERSION_CHECKS_MISSING_FILE" "keyfile.toml not found!"; _end_raw_group; return 1; fi
              _log_raw_debug "Required files new.toml and keyfile.toml are present."

              _log_raw_notice "VERSION_CHECKS_RUN_NVCHECKER" "Running nvchecker..."
              # nvchecker should be run as 'builder' because keyfile.toml and new.toml are owned by builder.
              # Also, nvchecker might write to a cache in builder's home directory.
              # Using sudo -E -u builder to preserve environment and run as builder.
              # `local.json` will be created by nvchecker.
              local nvchecker_cmd="nvchecker -c new.toml -k keyfile.toml --logger json"
              _log_raw_debug "Executing as builder: ${nvchecker_cmd} > local.json"
              if sudo -E -u builder bash -c "${nvchecker_cmd}" > local.json; then
                 _log_raw_notice "VERSION_CHECKS_NVCHECKER_SUCCESS" "nvchecker ran successfully."
                 _log_raw_debug "Contents of local.json (new versions from nvchecker):"
                 cat local.json | while IFS= read -r line; do _log_raw_debug "  local.json: $line"; done
                 if [ ! -s local.json ]; then _log_raw_warning "VERSION_CHECKS_NVCHECKER_EMPTY_OUTPUT" "local.json is empty after nvchecker run."; fi
              else
                 local nvchecker_exit_code=$?
                 _log_raw_error "VERSION_CHECKS_NVCHECKER_FAILED" "nvchecker command FAILED with exit code ${nvchecker_exit_code}."
                 # Even if nvchecker fails, try to show local.json if it was created
                 if [ -f "local.json" ]; then 
                    _log_raw_debug "Contents of local.json (on failure):"
                    cat local.json | while IFS= read -r line; do _log_raw_debug "  local.json: $line"; done
                 else 
                    _log_raw_debug "local.json was not created."
                 fi
                 _end_raw_group; return 1
              fi

              _log_raw_notice "VERSION_CHECKS_RUN_NVCMP" "Running nvcmp..."
              # nvcmp also likely needs to be run as builder if it reads files owned by builder or writes to builder's cache.
              # It reads new.toml (owned by builder) and potentially aur.json/local.json.
              # `changes.json` will be created by nvcmp.
              # Pre-requisite: aur.json must exist. This is created by compare_aur_local_versions.py in the original script.
              # For THIS TEST, aur.json might not exist yet. We should create a dummy one or acknowledge this.
              if [ ! -f "aur.json" ]; then
                  _log_raw_warning "VERSION_CHECKS_NVCMP_NO_AUR_JSON" "File 'aur.json' not found. nvcmp might behave unexpectedly or fail. Creating dummy aur.json for this test."
                  echo "{}" | sudo -u builder tee aur.json > /dev/null # Create dummy owned by builder
              fi
              
              local nvcmp_cmd="nvcmp -c new.toml"
              _log_raw_debug "Executing as builder: ${nvcmp_cmd} > changes.json"
              if sudo -E -u builder bash -c "${nvcmp_cmd}" > changes.json; then
                 _log_raw_notice "VERSION_CHECKS_NVCMP_SUCCESS" "nvcmp ran successfully."
                 _log_raw_debug "Contents of changes.json (comparison results):"
                 cat changes.json | while IFS= read -r line; do _log_raw_debug "  changes.json: $line"; done
                 if [ ! -s changes.json ]; then _log_raw_warning "VERSION_CHECKS_NVCMP_EMPTY_OUTPUT" "changes.json is empty after nvcmp run."; fi
              else
                 local nvcmp_exit_code=$?
                 _log_raw_error "VERSION_CHECKS_NVCMP_FAILED" "nvcmp command FAILED with exit code ${nvcmp_exit_code}."
                 if [ -f "changes.json" ]; then 
                    _log_raw_debug "Contents of changes.json (on failure):"
                    cat changes.json | while IFS= read -r line; do _log_raw_debug "  changes.json: $line"; done
                 else
                    _log_raw_debug "changes.json was not created."
                 fi
                 _end_raw_group; return 1
              fi

              _log_raw_notice "VERSION_CHECKS_END" "Exiting run_version_checks function successfully."
              _end_raw_group; return 0
          }
          _log_raw_notice "VERSION_CHECKS_DEF_DONE" "run_version_checks function defined."


          # --- Main Execution Flow (Phased) ---
          _log_raw_notice "MAIN_EXEC_START" "Starting main execution flow..."
          exit_code_setup_env=0; exit_code_nv_config=0; exit_code_ver_checks=0

          if setup_environment; then _log_raw_notice "MAIN_EXEC_SETUP_SUCCESS" "setup_environment SUCCEEDED."
          else exit_code_setup_env=$?; _log_raw_error "MAIN_EXEC_SETUP_FAILED" "setup_environment FAILED. $exit_code_setup_env."; exit "${exit_code_setup_env}"; fi

          if generate_nvchecker_config; then _log_raw_notice "MAIN_EXEC_NVCHECKER_CONFIG_SUCCESS" "generate_nvchecker_config SUCCEEDED."
          else exit_code_nv_config=$?; _log_raw_error "MAIN_EXEC_NVCHECKER_CONFIG_FAILED" "generate_nvchecker_config FAILED. $exit_code_nv_config."; exit "${exit_code_nv_config}"; fi
          
          _log_raw_notice "MAIN_EXEC_VERSION_CHECKS" "Attempting to call run_version_checks..."
          if run_version_checks; then
            _log_raw_notice "MAIN_EXEC_VERSION_CHECKS_SUCCESS" "run_version_checks call SUCCEEDED."
          else
            exit_code_ver_checks=$? 
            _log_raw_error "MAIN_EXEC_VERSION_CHECKS_FAILED" "run_version_checks call FAILED. Exit code: ${exit_code_ver_checks}. Stopping workflow."
            exit "${exit_code_ver_checks}"
          fi

          _log_raw_notice "SCRIPT_PHASED_END" "Current test phase (up to run_version_checks) finished. Check logs."
          
          # --- get_package_updates_list and subsequent functions ARE TEMPORARILY OMITTED ---
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # GHuK for nvchecker (already handled as it's a secret)
