name: Grouped NVCHECKER Updates
on:
  schedule:
    - cron: '0 */12 * * *'  # Runs every 12 hours
  workflow_dispatch:  # Allows manual triggering

jobs:
  arch-task:
    runs-on: ubuntu-latest
    container:
      image: archlinux:latest
      options: --privileged # Required for system-level changes like useradd, pacman
    env:
        AUR_MAINTAINER_NAME: envolution
        GIT_USERNAME: envolution
        GIT_EMAIL: involution@gmail.com
        # For GITHUB_STEP_SUMMARY
        ACTIONS_STEP_SUMMARY: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}#step:${{ github.job }}:markdown-summary

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize pacman keyring and update system
        run: |
          set -e 
          echo "::group::Initialize pacman and Update System"
          echo "Initializing pacman keyring..."
          mkdir -p /etc/pacman.d/gnupg
          pacman-key --init
          pacman-key --populate archlinux
          
          echo "Enabling multilib repository..."
          echo -e "\n[multilib]\nInclude = /etc/pacman.d/mirrorlist" >> /etc/pacman.conf
          
          echo "Updating system and installing core dependencies..."
          pacman -Sy --noconfirm --needed archlinux-keyring 
          pacman -Syu --noconfirm 
          
          echo "Installing necessary packages..."
          pacman -S --noconfirm --needed \
            git base-devel pacman-contrib openssh github-cli jq expac \
            ruby-rdoc ruby-pkg-config gnupg \
            python python-pip \
            pyalpm python-awesomeversion python-packaging python-lxml \
            python-gobject python-requests libnotify nvchecker \
            binutils multilib-devel python-aiohttp clang python-jq \
            sudo 
          echo "::endgroup::"

      - name: Setup non-root user for AUR operations
        shell: bash
        run: |
          set -e
          echo "::group::Setup non-root user 'builder'"
          echo "Creating build user 'builder'..."
          useradd -m -s /bin/bash builder 
          echo "builder ALL=(ALL) NOPASSWD: ALL" > /etc/sudoers.d/builder
          chmod 0440 /etc/sudoers.d/builder

          echo "Setting up directories for builder..."
          install -d -o builder -g builder -m 700 /home/builder/.gnupg 
          install -d -o builder -g builder -m 755 /home/builder/.cache
          install -d -o builder -g builder -m 755 /home/builder/.local
          install -d -o builder -g builder -m 755 /home/builder/.local/share
          install -d -o builder -g builder -m 755 /home/builder/.cache/paru
          install -d -o builder -g builder -m 755 /home/builder/.local/share/paru

          echo "Builder user setup complete."
          echo "::endgroup::"

      - name: Install paru (AUR helper)
        run: |
          set -e
          echo "::group::Install paru (AUR helper)"
          echo "Installing paru for 'builder' user..."
          cd /tmp
          sudo -u builder git clone https://aur.archlinux.org/paru-bin.git
          cd paru-bin
          sudo -u builder makepkg -si --noconfirm

          echo "Configuring paru..."
          echo -e "[options]\nBatchInstall\nBottomUp\nRemoveMake\nSudoLoop\nUseAsk" | sudo tee /etc/paru.conf > /dev/null
          
          echo "Paru installation and configuration complete."
          echo "::endgroup::"

      - name: Setup SSH key for AUR
        run: |
          set -e
          echo "::group::Setup SSH key for AUR"
          echo "Setting up SSH key for AUR access..."
          SSH_DIR="/home/builder/.ssh"
          mkdir -p "${SSH_DIR}"
          echo "${{ secrets.AUR_SSH_PRIVATE_KEY }}" > "${SSH_DIR}/aur"
          
          ssh-keyscan aur.archlinux.org >> "${SSH_DIR}/known_hosts"
          
          echo "Host aur.archlinux.org" >> "${SSH_DIR}/config"
          echo "  IdentityFile ${SSH_DIR}/aur" >> "${SSH_DIR}/config"
          echo "  User aur" >> "${SSH_DIR}/config" 
          echo "  StrictHostKeyChecking yes" >> "${SSH_DIR}/config"

          chown -R builder:builder "${SSH_DIR}"
          chmod 700 "${SSH_DIR}"
          chmod 600 "${SSH_DIR}/aur"
          chmod 600 "${SSH_DIR}/config" 
          chmod 644 "${SSH_DIR}/known_hosts"
          
          echo "SSH key setup complete. Permissions:"
          ls -ldn "${SSH_DIR}" "${SSH_DIR}/aur" "${SSH_DIR}/config" "${SSH_DIR}/known_hosts" # Use -n to show numeric UID/GID
          echo "::endgroup::"

      - name: Configure Git for builder user
        run: |
          set -e
          echo "::group::Configure Git for builder user"
          echo "Configuring Git for 'builder' user..."
          sudo -u builder git config --global user.name "${{ env.GIT_USERNAME }}"
          sudo -u builder git config --global user.email "${{ env.GIT_EMAIL }}"
          echo "Git configuration complete."
          echo "::endgroup::"

      - name: Load NVChecker Custom Source (if any)
        run: |
          set -e
          echo "::group::Load NVChecker Custom Source"
          CUSTOM_NV_SOURCE_SCRIPT="${GITHUB_WORKSPACE}/scripts/github-graphql.py"
          if [ -f "${CUSTOM_NV_SOURCE_SCRIPT}" ]; then
            SITE_PACKAGES_DIR=$(python3 -c "import site; print(site.getsitepackages()[0])")
            NVCHECKER_CUSTOM_SOURCE_DIR="${SITE_PACKAGES_DIR}/nvchecker_source"
            
            echo "::notice title=NVChecker Custom Source::Copying '${CUSTOM_NV_SOURCE_SCRIPT}' to '${NVCHECKER_CUSTOM_SOURCE_DIR}'..."
            mkdir -p "${NVCHECKER_CUSTOM_SOURCE_DIR}" 
            cp "${CUSTOM_NV_SOURCE_SCRIPT}" "${NVCHECKER_CUSTOM_SOURCE_DIR}/"
            echo "Custom NVChecker source loaded."
          else
            echo "::notice title=NVChecker Custom Source::Script not found at '${CUSTOM_NV_SOURCE_SCRIPT}'. Skipping."
          fi
          echo "::endgroup::"

      - name: Run Arch Package Update and Build Task # Next test with chown fix
        shell: bash
        run: |
          #!/bin/bash
          set -xeuo pipefail 
          echo "::notice title=SCRIPT_START::Bash script for 'Run Arch Package Update and Build Task' started. set -xeuo pipefail active."

          # --- Helper Functions (Definitions Only) ---
          _log_raw_debug() { echo "::debug::$1"; }
          _log_raw_notice() { echo "::notice title=$1::$2"; }
          _log_raw_error() { echo "::error title=$1::$2"; }
          _start_raw_group() { echo "::group::$1"; }
          _end_raw_group() { echo "::endgroup::"; }
          _log_raw_notice "HELPER_DEF" "Helper functions defined."

          # --- Configuration & Constants ---
          _log_raw_notice "VARS_START" "Defining initial constants..."
          BUILDER_HOME="/home/builder"
          _log_raw_debug "BUILDER_HOME='${BUILDER_HOME}'"
          NVCHECKER_RUN_DIR="${BUILDER_HOME}/nvchecker-run" 
          _log_raw_debug "NVCHECKER_RUN_DIR='${NVCHECKER_RUN_DIR}'"
          ARTIFACTS_DIR="${GITHUB_WORKSPACE}/artifacts"
          _log_raw_debug "ARTIFACTS_DIR='${ARTIFACTS_DIR}'"
          PACKAGE_DETAILS_JSON_PATH="${NVCHECKER_RUN_DIR}/package_details.json" 
          _log_raw_debug "PACKAGE_DETAILS_JSON_PATH='${PACKAGE_DETAILS_JSON_PATH}'"
          _log_raw_notice "VARS_END" "Initial constants defined."

          # --- setup_environment function ---
          setup_environment() {
              _start_raw_group "DEBUG: setup_environment Function"
              _log_raw_notice "SETUP_ENV_START" "Entering setup_environment function. Current PWD: $(pwd)"
              _log_raw_debug "GITHUB_WORKSPACE is: ${GITHUB_WORKSPACE}"
              
              sudo -u builder mkdir -p "${NVCHECKER_RUN_DIR}"
              _log_raw_debug "mkdir -p ${NVCHECKER_RUN_DIR} done."
              sudo -u builder mkdir -p "${ARTIFACTS_DIR}"
              _log_raw_debug "mkdir -p ${ARTIFACTS_DIR} done."
              
              cd "${NVCHECKER_RUN_DIR}"
              _log_raw_debug "Current directory after cd: $(pwd)."

              _log_raw_notice "SETUP_ENV_VERIFY_AND_COPY_SCRIPTS" "Verifying and copying necessary scripts..."
              local all_scripts_found_and_copied=true # 'local' is fine here, inside function

              for script_name_to_copy in "buildscript.py" "compare_aur_local_versions.py"; do
                  _log_raw_debug "Processing script for verification and copy: ${script_name_to_copy}"
                  local found_script_path # 'local' is fine here
                  found_script_path=$(find "${GITHUB_WORKSPACE}/scripts/" -name "${script_name_to_copy}" -type f -print -quit 2>/dev/null)

                  if [ -n "${found_script_path}" ] && [ -f "${found_script_path}" ]; then
                      _log_raw_notice "SETUP_ENV_SCRIPT_FOUND" "Script '${script_name_to_copy}' FOUND at '${found_script_path}'."
                      if sudo -u builder cp "${found_script_path}" "${NVCHECKER_RUN_DIR}/"; then
                          _log_raw_debug "Copy SUCCESS for ${script_name_to_copy} from '${found_script_path}'."
                          if sudo -u builder chmod +x "${NVCHECKER_RUN_DIR}/${script_name_to_copy}"; then
                             _log_raw_debug "chmod +x SUCCESS for ${script_name_to_copy} in '${NVCHECKER_RUN_DIR}'."
                          else
                             _log_raw_error "SETUP_ENV_CHMOD_FAILED" "chmod +x FAILED for '${NVCHECKER_RUN_DIR}/${script_name_to_copy}'. Exit code: $?."
                             all_scripts_found_and_copied=false
                          fi
                      else
                          _log_raw_error "SETUP_ENV_COPY_FAILED" "sudo -u builder cp FAILED for ${script_name_to_copy} from '${found_script_path}'. Exit code: $?."
                          all_scripts_found_and_copied=false
                      fi
                  else
                      _log_raw_error "SETUP_ENV_MISSING_SCRIPT" "Script '${script_name_to_copy}' NOT FOUND in expected path '${GITHUB_WORKSPACE}/scripts/'. This is an issue."
                      all_scripts_found_and_copied=false
                  fi
              done
              
              _log_raw_debug "Listing contents of destination '${NVCHECKER_RUN_DIR}' after attempted copies:"
              ls -la "${NVCHECKER_RUN_DIR}" | while IFS= read -r line; do _log_raw_debug "  ls dest: $line"; done

              if ! ${all_scripts_found_and_copied}; then
                  _log_raw_error "SETUP_ENV_FINAL_FAILURE" "CRITICAL: One or more scripts were not found or copied/chmodded successfully. Cannot proceed."
                  _end_raw_group 
                  return 1 
              fi
              _log_raw_notice "SETUP_ENV_END" "Exiting setup_environment function successfully."
              _end_raw_group
              return 0 
          }
          _log_raw_notice "SETUP_ENV_DEF_DONE" "setup_environment function defined."

          # --- generate_nvchecker_config function ---
          generate_nvchecker_config() {
              _start_raw_group "DEBUG: generate_nvchecker_config Function"
              _log_raw_notice "NVCHECKER_CONFIG_START" "Entering generate_nvchecker_config function."
              
              local combined_config_file="new.toml" 
              local keyfile="keyfile.toml"         

              _log_raw_debug "Target combined_config_file: $(pwd)/${combined_config_file}"
              _log_raw_debug "Target keyfile: $(pwd)/${keyfile}"

              _log_raw_debug "Writing base config to ${combined_config_file}..."
              echo "[__config__]" > "${combined_config_file}"
              echo "oldver = 'aur.json'" >> "${combined_config_file}" 
              echo "newver = 'local.json'" >> "${combined_config_file}" 
              _log_raw_debug "Base config written."

              _log_raw_debug "Writing keyfile ${keyfile} with GHuK secret..."
              echo "[keys]" > "${keyfile}" 
              echo "github = '${{ secrets.GHuK }}'" >> "${keyfile}"
              _log_raw_debug "Keyfile ${keyfile} written."
              
              _log_raw_notice "NVCHECKER_CONFIG_APPEND" "Appending individual .nvchecker.toml files..."
              local find_path_pattern="${GITHUB_WORKSPACE}" 
              _log_raw_debug "Searching for .nvchecker.toml files in paths matching '${find_path_pattern}' and subdirectory pattern '*/maintain/build/*/.nvchecker.toml'"

              local individual_nvchecker_configs=() # 'local' is fine here
              mapfile -t individual_nvchecker_configs < <(find "${find_path_pattern}" -path "*/maintain/build/*/.nvchecker.toml" -type f -print)
              
              if [ ${#individual_nvchecker_configs[@]} -eq 0 ]; then
                  _log_raw_warning "NVCHECKER_CONFIG_NO_INDIVIDUAL_FILES" "No individual .nvchecker.toml files found matching the pattern."
              else
                  _log_raw_notice "NVCHECKER_CONFIG_FOUND_FILES" "Found ${#individual_nvchecker_configs[@]} individual .nvchecker.toml files to append:"
                  printf "  ::debug::  - %s\n" "${individual_nvchecker_configs[@]}"
                  for conf_file in "${individual_nvchecker_configs[@]}"; do
                      _log_raw_debug "Appending content of '${conf_file}' to '${combined_config_file}'"
                      cat "${conf_file}" >> "${combined_config_file}"
                      echo "" >> "${combined_config_file}" 
                  done
              fi
              
              _log_raw_debug "Verifying size of ${combined_config_file}: $(wc -c < "${combined_config_file}") bytes"

              _log_raw_debug "Changing ownership of '${combined_config_file}' and '${keyfile}' to builder:builder..."
              # Script runs as root here, so direct chown is fine and correct.
              if chown builder:builder "${combined_config_file}" "${keyfile}"; then
                 _log_raw_debug "Ownership change SUCCESS for nvchecker config files."
              else
                 _log_raw_error "NVCHECKER_CONFIG_CHOWN_FAILED" "Could not chown nvchecker config files. Exit code $?."
                 _end_raw_group
                 return 1 
              fi
              _log_raw_notice "NVCHECKER_CONFIG_END" "Exiting generate_nvchecker_config function successfully."
              _end_raw_group
              return 0
          }
          _log_raw_notice "NVCHECKER_CONFIG_DEF_DONE" "generate_nvchecker_config function defined."


          # --- Main Execution Flow (Phased) ---
          _log_raw_notice "MAIN_EXEC_START" "Starting main execution flow..."
          
          exit_code_setup_env=0 # Initialize for safety, though set -e should prevent use if call fails
          exit_code_nv_config=0 # Initialize

          # Phase 1: Setup Environment
          if setup_environment; then
            _log_raw_notice "MAIN_EXEC_SETUP_SUCCESS" "setup_environment function call SUCCEEDED."
          else
            exit_code_setup_env=$? # Not 'local'
            _log_raw_error "MAIN_EXEC_SETUP_FAILED" "setup_environment function call FAILED. Exit code: ${exit_code_setup_env}. Stopping workflow."
            exit "${exit_code_setup_env}" 
          fi

          # Phase 2: Generate NVChecker Configuration
          _log_raw_notice "MAIN_EXEC_NVCHECKER_CONFIG" "Attempting to call generate_nvchecker_config..."
          if generate_nvchecker_config; then
            _log_raw_notice "MAIN_EXEC_NVCHECKER_CONFIG_SUCCESS" "generate_nvchecker_config call SUCCEEDED."
          else
            exit_code_nv_config=$? # Not 'local'
            _log_raw_error "MAIN_EXEC_NVCHECKER_CONFIG_FAILED" "generate_nvchecker_config call FAILED. Exit code: ${exit_code_nv_config}. Stopping workflow."
            exit "${exit_code_nv_config}"
          fi
          
          _log_raw_notice "SCRIPT_PHASED_END" "Current test phase (up to generate_nvchecker_config) finished. Check logs."
          
          #
          # --- run_version_checks and subsequent functions ARE TEMPORARILY OMITTED ---
          #
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # GHuK is referenced as ${{ secrets.GHuK }} in generate_nvchecker_config.
