      - name: Run Arch Package Update and Build Task # Next test
        shell: bash
        run: |
          #!/bin/bash
          set -xeuo pipefail 
          echo "::notice title=SCRIPT_START::Bash script for 'Run Arch Package Update and Build Task' started. set -xeuo pipefail active."

          # --- Helper Functions (Definitions Only) ---
          _log_raw_debug() { echo "::debug::$1"; }
          _log_raw_notice() { echo "::notice title=$1::$2"; }
          _log_raw_error() { echo "::error title=$1::$2"; }
          _start_raw_group() { echo "::group::$1"; }
          _end_raw_group() { echo "::endgroup::"; }
          _log_raw_notice "HELPER_DEF" "Helper functions defined."

          # --- Configuration & Constants ---
          _log_raw_notice "VARS_START" "Defining initial constants..."
          BUILDER_HOME="/home/builder"
          _log_raw_debug "BUILDER_HOME='${BUILDER_HOME}'"
          NVCHECKER_RUN_DIR="${BUILDER_HOME}/nvchecker-run" 
          _log_raw_debug "NVCHECKER_RUN_DIR='${NVCHECKER_RUN_DIR}'"
          ARTIFACTS_DIR="${GITHUB_WORKSPACE}/artifacts"
          _log_raw_debug "ARTIFACTS_DIR='${ARTIFACTS_DIR}'"
          PACKAGE_DETAILS_JSON_PATH="${NVCHECKER_RUN_DIR}/package_details.json" 
          _log_raw_debug "PACKAGE_DETAILS_JSON_PATH='${PACKAGE_DETAILS_JSON_PATH}'"
          _log_raw_notice "VARS_END" "Initial constants defined."

          # --- setup_environment function ---
          setup_environment() {
              _start_raw_group "DEBUG: setup_environment Function"
              _log_raw_notice "SETUP_ENV_START" "Entering setup_environment function. Current PWD: $(pwd)"
              _log_raw_debug "GITHUB_WORKSPACE is: ${GITHUB_WORKSPACE}"
              
              sudo -u builder mkdir -p "${NVCHECKER_RUN_DIR}"
              _log_raw_debug "mkdir -p ${NVCHECKER_RUN_DIR} done."
              sudo -u builder mkdir -p "${ARTIFACTS_DIR}"
              _log_raw_debug "mkdir -p ${ARTIFACTS_DIR} done."
              
              cd "${NVCHECKER_RUN_DIR}"
              _log_raw_debug "Current directory after cd: $(pwd)."

              _log_raw_notice "SETUP_ENV_VERIFY_AND_COPY_SCRIPTS" "Verifying and copying necessary scripts..."
              local all_scripts_found_and_copied=true

              for script_name_to_copy in "buildscript.py" "compare_aur_local_versions.py"; do
                  _log_raw_debug "Processing script for verification and copy: ${script_name_to_copy}"
                  local found_script_path
                  found_script_path=$(find "${GITHUB_WORKSPACE}/scripts/" -name "${script_name_to_copy}" -type f -print -quit 2>/dev/null)

                  if [ -n "${found_script_path}" ] && [ -f "${found_script_path}" ]; then
                      _log_raw_notice "SETUP_ENV_SCRIPT_FOUND" "Script '${script_name_to_copy}' FOUND at '${found_script_path}'."
                      if sudo -u builder cp "${found_script_path}" "${NVCHECKER_RUN_DIR}/"; then
                          _log_raw_debug "Copy SUCCESS for ${script_name_to_copy} from '${found_script_path}'."
                          if sudo -u builder chmod +x "${NVCHECKER_RUN_DIR}/${script_name_to_copy}"; then
                             _log_raw_debug "chmod +x SUCCESS for ${script_name_to_copy} in '${NVCHECKER_RUN_DIR}'."
                          else
                             _log_raw_error "SETUP_ENV_CHMOD_FAILED" "chmod +x FAILED for '${NVCHECKER_RUN_DIR}/${script_name_to_copy}'. Exit code: $?."
                             all_scripts_found_and_copied=false
                          fi
                      else
                          _log_raw_error "SETUP_ENV_COPY_FAILED" "sudo -u builder cp FAILED for ${script_name_to_copy} from '${found_script_path}'. Exit code: $?."
                          all_scripts_found_and_copied=false
                      fi
                  else
                      _log_raw_error "SETUP_ENV_MISSING_SCRIPT" "Script '${script_name_to_copy}' NOT FOUND in expected path '${GITHUB_WORKSPACE}/scripts/'. Broader search may run if enabled, but this is an issue."
                      all_scripts_found_and_copied=false
                  fi
              done
              
              _log_raw_debug "Listing contents of destination '${NVCHECKER_RUN_DIR}' after attempted copies:"
              ls -la "${NVCHECKER_RUN_DIR}" | while IFS= read -r line; do _log_raw_debug "  ls dest: $line"; done

              if ! ${all_scripts_found_and_copied}; then
                  _log_raw_error "SETUP_ENV_FINAL_FAILURE" "CRITICAL: One or more scripts were not found or copied/chmodded successfully. Cannot proceed."
                  _end_raw_group 
                  return 1 
              fi
              _log_raw_notice "SETUP_ENV_END" "Exiting setup_environment function successfully."
              _end_raw_group
              return 0 
          }
          _log_raw_notice "SETUP_ENV_DEF_DONE" "setup_environment function defined."

          # --- generate_nvchecker_config function ---
          generate_nvchecker_config() {
              _start_raw_group "DEBUG: generate_nvchecker_config Function"
              _log_raw_notice "NVCHECKER_CONFIG_START" "Entering generate_nvchecker_config function."
              
              local combined_config_file="new.toml" # Relative to NVCHECKER_RUN_DIR as we cd'd there
              local keyfile="keyfile.toml"         # Relative to NVCHECKER_RUN_DIR

              _log_raw_debug "Target combined_config_file: $(pwd)/${combined_config_file}"
              _log_raw_debug "Target keyfile: $(pwd)/${keyfile}"

              _log_raw_debug "Writing base config to ${combined_config_file}..."
              echo "[__config__]" > "${combined_config_file}"
              echo "oldver = 'aur.json'" >> "${combined_config_file}" 
              echo "newver = 'local.json'" >> "${combined_config_file}" 
              _log_raw_debug "Base config written. Current content of ${combined_config_file}:"
              cat "${combined_config_file}" | while IFS= read -r line; do _log_raw_debug "  ${combined_config_file}: $line"; done

              _log_raw_debug "Writing keyfile ${keyfile} with GHuK secret..."
              # Mask the secret in the log (set -x will still show it, this is for our manual debug lines)
              echo "[keys]" > "${keyfile}"
              echo "github = '********'" >> "${keyfile}" # Log masked version
              # Actual write:
              echo "[keys]" > "${keyfile}" # Overwrite for actual content
              echo "github = '${{ secrets.GHuK }}'" >> "${keyfile}"
              _log_raw_debug "Keyfile ${keyfile} written. Content (secret masked in log):"
              cat "${keyfile}" | sed "s/${{ secrets.GHuK }}/********/g" | while IFS= read -r line; do _log_raw_debug "  ${keyfile}: $line"; done
              
              _log_raw_notice "NVCHECKER_CONFIG_APPEND" "Appending individual .nvchecker.toml files..."
              # Path GITHUB_WORKSPACE/maintain/build is an example, adjust if your structure differs
              local find_path_pattern="${GITHUB_WORKSPACE}" # Start search from workspace root
              _log_raw_debug "Searching for .nvchecker.toml files in paths matching '${find_path_pattern}' and subdirectory pattern '*/maintain/build/*/.nvchecker.toml'"

              # Store find results in an array to count and log them
              local individual_nvchecker_configs=()
              mapfile -t individual_nvchecker_configs < <(find "${find_path_pattern}" -path "*/maintain/build/*/.nvchecker.toml" -type f -print)
              
              if [ ${#individual_nvchecker_configs[@]} -eq 0 ]; then
                  _log_raw_warning "NVCHECKER_CONFIG_NO_INDIVIDUAL_FILES" "No individual .nvchecker.toml files found matching the pattern."
              else
                  _log_raw_notice "NVCHECKER_CONFIG_FOUND_FILES" "Found ${#individual_nvchecker_configs[@]} individual .nvchecker.toml files to append:"
                  printf "  ::debug::  - %s\n" "${individual_nvchecker_configs[@]}"
                  for conf_file in "${individual_nvchecker_configs[@]}"; do
                      _log_raw_debug "Appending content of '${conf_file}' to '${combined_config_file}'"
                      cat "${conf_file}" >> "${combined_config_file}"
                      echo "" >> "${combined_config_file}" # Ensure a newline
                  done
              fi
              
              _log_raw_debug "Final content of combined_config_file (${combined_config_file}):"
              # Avoid printing very large config to logs unless necessary for deep debugging
              # cat "${combined_config_file}" | while IFS= read -r line; do _log_raw_debug "  ${combined_config_file}: $line"; done
              _log_raw_debug "Verifying size of ${combined_config_file}: $(wc -c < "${combined_config_file}") bytes"


              _log_raw_debug "Changing ownership of '${combined_config_file}' and '${keyfile}' to builder..."
              if sudo -u builder chown builder:builder "${combined_config_file}" "${keyfile}"; then
                 _log_raw_debug "Ownership change SUCCESS for nvchecker config files."
              else
                 _log_raw_error "NVCHECKER_CONFIG_CHOWN_FAILED" "Could not chown nvchecker config files. Exit code $?."
                 _end_raw_group
                 return 1 # Fail if chown fails
              fi
              _log_raw_notice "NVCHECKER_CONFIG_END" "Exiting generate_nvchecker_config function successfully."
              _end_raw_group
              return 0
          }
          _log_raw_notice "NVCHECKER_CONFIG_DEF_DONE" "generate_nvchecker_config function defined."


          # --- Main Execution Flow (Phased) ---
          _log_raw_notice "MAIN_EXEC_START" "Starting main execution flow..."

          # Phase 1: Setup Environment
          if setup_environment; then
            _log_raw_notice "MAIN_EXEC_SETUP_SUCCESS" "setup_environment function call SUCCEEDED."
          else
            local exit_code_setup_env=$?
            _log_raw_error "MAIN_EXEC_SETUP_FAILED" "setup_environment function call FAILED. Exit code: ${exit_code_setup_env}. Stopping workflow."
            exit "${exit_code_setup_env}" 
          fi

          # Phase 2: Generate NVChecker Configuration
          _log_raw_notice "MAIN_EXEC_NVCHECKER_CONFIG" "Attempting to call generate_nvchecker_config..."
          if generate_nvchecker_config; then
            _log_raw_notice "MAIN_EXEC_NVCHECKER_CONFIG_SUCCESS" "generate_nvchecker_config call SUCCEEDED."
          else
            local exit_code_nv_config=$?
            _log_raw_error "MAIN_EXEC_NVCHECKER_CONFIG_FAILED" "generate_nvchecker_config call FAILED. Exit code: ${exit_code_nv_config}. Stopping workflow."
            exit "${exit_code_nv_config}"
          fi
          
          _log_raw_notice "SCRIPT_PHASED_END" "Current test phase (up to generate_nvchecker_config) finished. Check logs."
          
          #
          # --- run_version_checks and subsequent functions ARE TEMPORARILY OMITTED ---
          #
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Ensure GHuK is available if your generate_nvchecker_config uses it.
          # It's referenced as ${{ secrets.GHuK }} in the function.
