name: Consolidated Arch Package Updater
on:
  schedule:
    - cron: '0 */12 * * *' # Runs every 12 hours
  workflow_dispatch:      # Allows manual triggering

jobs:
  arch-package-task:
    runs-on: ubuntu-latest
    container:
      image: archlinux:latest
      options: --privileged # Required for system-level changes like useradd, pacman
    env:
      # --- Core Configuration ---
      AUR_MAINTAINER_NAME: "envolution" # Your AUR Maintainer Name
      GITHUB_REPO_OWNER_SLASH_NAME: "${{ github.repository }}" # e.g., "YourUser/YourRepo"
      PKGBUILD_FILES_ROOT: "${{ github.workspace }}/maintain" # Root dir in repo for your PKGBUILDs structure
      GIT_COMMIT_USER_NAME: "envolution"
      GIT_COMMIT_USER_EMAIL: "involution@gmail.com"

      # --- Secrets (Pass via GitHub Secrets UI) ---
      GH_TOKEN_FOR_RELEASES_AND_NVCHECKER: "${{ secrets.GITHUB_TOKEN }}" # Standard GITHUB_TOKEN for releases and nvchecker GitHub key
      AUR_SSH_PRIVATE_KEY_CONTENT: "${{ secrets.AUR_SSH_PRIVATE_KEY }}" # SSH private key for AUR

      # --- GitHub Actions Specific ---
      ACTIONS_STEP_DEBUG: "true" # Set to "false" for less verbose GHA logs, "true" for debug
      GITHUB_RUN_ID_FOR_ARTIFACTS: "${{ github.run_id }}"
      GITHUB_STEP_SUMMARY_FILE_PATH: "${{ github.step_summary }}"
      # Define package lists here for easy reuse in fingerprinting
      PACMAN_PACKAGES: >-
        archlinux-keyring git base-devel pacman-contrib openssh github-cli
        jq expac python python-pip nvchecker sudo
        python-requests python-lxml rsync
      PARU_PACKAGES: python-looseversion

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate Dependency Fingerprint
        id: dep_fingerprint
        run: |
          echo "::group::Generate Dependency Fingerprint"
          DEPS_TEXT_FILE="dependencies.txt"
          echo "Pacman Packages:" > ${DEPS_TEXT_FILE}
          echo "${{ env.PACMAN_PACKAGES }}" | tr ' ' '\n' | sort | uniq >> ${DEPS_TEXT_FILE}
          echo "" >> ${DEPS_TEXT_FILE}
          echo "Paru Packages:" >> ${DEPS_TEXT_FILE}
          echo "${{ env.PARU_PACKAGES }}" | tr ' ' '\n' | sort | uniq >> ${DEPS_TEXT_FILE}
          
          echo "Generated ${DEPS_TEXT_FILE}:"
          cat ${DEPS_TEXT_FILE}
          
          # Output the hash of the dependencies file
          echo "fingerprint=$(sha256sum ${DEPS_TEXT_FILE} | awk '{ print $1 }')" >> $GITHUB_OUTPUT
          echo "::endgroup::"

      - name: Cache Arch Linux packages and Paru cache
        uses: actions/cache@v4
        id: cache-arch-packages
        with:
          path: |
            /var/cache/pacman/pkg
            /home/builder/.cache/paru
            /home/builder/.cache/pip
          key: ${{ runner.os }}-arch-${{ steps.dep_fingerprint.outputs.fingerprint }}-${{ github.run_id }} # More aggressive key for testing
          # For more stable weekly caching, use something like:
          # key: ${{ runner.os }}-arch-${{ steps.dep_fingerprint.outputs.fingerprint }}-${{ hashFiles('**/workflow.yml') }}-${{ env.CACHE_DATE }}
          # where CACHE_DATE is set like: env: CACHE_DATE: $(date +'%Y-%U')
          restore-keys: |
            ${{ runner.os }}-arch-${{ steps.dep_fingerprint.outputs.fingerprint }}- 
            # Add more general restore keys if needed, e.g., by week

      - name: Initialize pacman, update system, and install dependencies
        run: |
          set -e
          echo "::group::Initialize pacman and Install Dependencies"
          echo "Initializing pacman keyring..."
          pacman-key --init
          pacman-key --populate archlinux

          echo "Enabling multilib repository..."
          sed -i "/\[multilib\]/,/Include/"'s/^#//' /etc/pacman.conf
          
          echo "Updating pacman database..."
          pacman -Sy --noconfirm # Just sync database if cache hit is likely, -Syu if cache miss
          
          echo "Installing core dependencies from pacman..."
          # Use the env var for the package list
          # The --needed flag is important here with caching
          pacman -S --noconfirm --needed ${{ env.PACMAN_PACKAGES }}
          echo "::endgroup::"

      - name: Setup non-root user 'builder'
        shell: bash
        run: |
          set -e
          echo "::group::Setup non-root user 'builder'"
          # Ensure /home/builder exists before creating subdirs, useradd -m should do this.
          if ! id "builder" &>/dev/null; then
            useradd -m -s /bin/bash builder
          else
            echo "User 'builder' already exists."
            # Ensure home directory exists and has correct ownership if user already exists (e.g. from restored cache)
            mkdir -p /home/builder
            chown builder:builder /home/builder
          fi
          echo "builder ALL=(ALL) NOPASSWD: ALL" > /etc/sudoers.d/builder
          chmod 0440 /etc/sudoers.d/builder

          # Create common directories builder might need, ensure ownership
          # These are crucial if restoring /home/builder from cache
          install -d -o builder -g builder -m 700 /home/builder/.gnupg
          install -d -o builder -g builder -m 755 /home/builder/.cache # Main cache dir for paru, pip
          install -d -o builder -g builder -m 755 /home/builder/.cache/paru # Specific for paru
          install -d -o builder -g builder -m 755 /home/builder/.cache/pip # Specific for pip
          install -d -o builder -g builder -m 755 /home/builder/.local # For user-local binaries/share
          install -d -o builder -g builder -m 755 /home/builder/.local/share
          install -d -o builder -g builder -m 755 /home/builder/.ssh
          echo "::endgroup::"

      - name: Install paru (AUR helper) for 'builder'
        # Only run if paru is not already installed (e.g. from cache)
        if: steps.cache-arch-packages.outputs.cache-hit != 'true' || ! command -v paru &> /dev/null
        run: |
          set -e
          echo "::group::Install paru (AUR helper)"
          cd /tmp
          # Clean up previous paru-bin dir if it exists to ensure fresh clone if needed
          rm -rf paru-bin 
          sudo -u builder HOME=/home/builder git clone https://aur.archlinux.org/paru-bin.git
          cd paru-bin
          sudo -u builder HOME=/home/builder makepkg -si --noconfirm
          echo -e "[options]\nBatchInstall\nBottomUp\nRemoveMake\nSudoLoop\nUseAsk" | tee /etc/paru.conf > /dev/null
          echo "Paru installation/check complete."
          echo "::endgroup::"
        # Fallback: if paru is already installed, ensure paru.conf is set
      - name: Ensure paru.conf exists
        if: command -v paru &> /dev/null
        run: |
          echo "Ensuring /etc/paru.conf is present..."
          echo -e "[options]\nBatchInstall\nBottomUp\nRemoveMake\nSudoLoop\nUseAsk" | sudo tee /etc/paru.conf > /dev/null


      - name: Install AUR sourced dependencies
        run: |
          set -e
          echo "::group::Install AUR sourced dependencies"
          # Use the env var for the package list
          # The --needed flag is important here with caching
          sudo -u builder HOME=/home/builder paru -S --noconfirm --nocheck --needed ${{ env.PARU_PACKAGES }}
          echo "::endgroup::"

      # ... rest of your steps remain the same ...
      # (Setup SSH key, Configure Git, Create Artifacts dir, Prepare and Execute Main Python Script, Upload artifacts)

      - name: Setup SSH key for AUR access by 'builder'
        if: env.AUR_SSH_PRIVATE_KEY_CONTENT != ''
        run: |
          set -e
          echo "::group::Setup SSH key for AUR"
          SSH_DIR="/home/builder/.ssh" # Already created and permissioned in 'Setup non-root user'
          echo "${AUR_SSH_PRIVATE_KEY_CONTENT}" > "${SSH_DIR}/aur_key"
          
          cat <<EOF > "${SSH_DIR}/config"
          Host aur.archlinux.org
            User aur
            IdentityFile ${SSH_DIR}/aur_key
            StrictHostKeyChecking accept-new # Or use ssh-keyscan if preferred
          EOF

          # Ownership should already be builder:builder, but re-chown specific files for safety after creation
          sudo chown builder:builder "${SSH_DIR}/aur_key" "${SSH_DIR}/config"
          chmod 600 "${SSH_DIR}/aur_key" "${SSH_DIR}/config"
          
          echo "SSH key setup for AUR complete."
          ls -ldn "${SSH_DIR}" "${SSH_DIR}/aur_key" "${SSH_DIR}/config" # -n for numeric UID/GID
          echo "::endgroup::"
        env:
          AUR_SSH_PRIVATE_KEY_CONTENT: ${{ env.AUR_SSH_PRIVATE_KEY_CONTENT }}

      - name: Configure Git for 'builder' user
        run: |
          set -e
          echo "::group::Configure Git for 'builder' user"
          sudo -u builder HOME=/home/builder git config --global user.name "${{ env.GIT_COMMIT_USER_NAME }}"
          sudo -u builder HOME=/home/builder git config --global user.email "${{ env.GIT_COMMIT_USER_EMAIL }}"
          # Setting defaultBranch might be better done if initializing new repos, not globally for existing clones.
          # sudo -u builder HOME=/home/builder git config --global init.defaultBranch "master" 
          echo "::endgroup::"

      - name: Create and permission Artifacts directory
        shell: bash
        run: |
          set -e
          echo "::group::Prepare Artifacts Directory"
          ARTIFACTS_DIR_IN_CONTAINER="${GITHUB_WORKSPACE}/artifacts"
          
          echo "Creating artifacts directory: ${ARTIFACTS_DIR_IN_CONTAINER}"
          mkdir -p "${ARTIFACTS_DIR_IN_CONTAINER}"
          
          echo "Setting ownership of ${ARTIFACTS_DIR_IN_CONTAINER} to builder user..."
          # Ensure parent dirs are accessible if GITHUB_WORKSPACE is not builder owned.
          # However, script runs as root here.
          sudo chown builder:builder "${ARTIFACTS_DIR_IN_CONTAINER}"
          
          echo "Artifacts directory prepared."
          ls -ld "${ARTIFACTS_DIR_IN_CONTAINER}"
          echo "::endgroup::"          

      - name: Prepare and Execute Main Python Script
        shell: bash
        run: |
          set -e
          echo "::group::Execute Main Python Script"
          SCRIPT_DIR="${GITHUB_WORKSPACE}/scripts"
          MAIN_SCRIPT_NAME="arch_package_manager.py"
          
          if [ ! -f "${SCRIPT_DIR}/${MAIN_SCRIPT_NAME}" ]; then
            echo "::error title=Script Missing::Consolidated script ${SCRIPT_DIR}/${MAIN_SCRIPT_NAME} not found!"
            exit 1
          fi

          cp "${SCRIPT_DIR}/${MAIN_SCRIPT_NAME}" "/home/builder/${MAIN_SCRIPT_NAME}"
          chown builder:builder "/home/builder/${MAIN_SCRIPT_NAME}"
          chmod +x "/home/builder/${MAIN_SCRIPT_NAME}"

          echo "Running the main package management script..."
          sudo -E -u builder \
            HOME="/home/builder" \
            PATH="/usr/local/bin:/usr/bin:/bin:/usr/local/sbin:/usr/sbin:/sbin:/home/builder/.local/bin" \
            python3 "/home/builder/${MAIN_SCRIPT_NAME}"
          echo "::endgroup::"

      - name: Upload build logs and artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ env.GITHUB_RUN_ID_FOR_ARTIFACTS }}
          path: ${{ github.workspace }}/artifacts/
          retention-days: 7
