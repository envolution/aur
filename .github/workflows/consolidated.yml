name: Consolidated Arch Package Updater
on:
  #schedule:
  #  - cron: '0 */12 * * *' # Runs every 12 hours
  workflow_dispatch:      # Allows manual triggering

jobs:
  arch-package-task:
    runs-on: ubuntu-latest
    container:
      image: archlinux:latest
      options: --privileged # Required for system-level changes like useradd, pacman
    env:
      # --- Core Configuration ---
      AUR_MAINTAINER_NAME: "envolution" # Your AUR Maintainer Name
      GITHUB_REPO_OWNER_SLASH_NAME: "${{ github.repository }}" # e.g., "YourUser/YourRepo"
      PKGBUILD_FILES_ROOT: "${{ github.workspace }}/maintain/build" # Root dir in repo for your PKGBUILDs structure
      GIT_COMMIT_USER_NAME: "envolution"
      GIT_COMMIT_USER_EMAIL: "involution@gmail.com"

      # --- Secrets (Pass via GitHub Secrets UI) ---
      GH_TOKEN_FOR_RELEASES_AND_NVCHECKER: "${{ secrets.GITHUB_TOKEN }}" # Standard GITHUB_TOKEN for releases and nvchecker GitHub key
      AUR_SSH_PRIVATE_KEY_CONTENT: "${{ secrets.AUR_SSH_PRIVATE_KEY }}" # SSH private key for AUR

      # --- GitHub Actions Specific ---
      ACTIONS_STEP_DEBUG: "true" # Set to "false" for less verbose GHA logs, "true" for debug
      GITHUB_RUN_ID_FOR_ARTIFACTS: "${{ github.run_id }}"
      GITHUB_STEP_SUMMARY_FILE_PATH: "${{ github.step_summary }}"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        #with:
        #  fetch-depth: 0

      - name: Initialize pacman, update system, and install dependencies
        run: |
          set -e
          echo "::group::Initialize pacman and Install Dependencies"
          echo "Initializing pacman keyring..."
          pacman-key --init
          pacman-key --populate archlinux

          echo "Enabling multilib repository..."
          sed -i "/\[multilib\]/,/Include/"'s/^#//' /etc/pacman.conf

          echo "Updating system and installing core dependencies..."
          pacman -Syu --noconfirm --needed \
            archlinux-keyring git base-devel pacman-contrib openssh github-cli \
            jq expac python python-pip nvchecker sudo \
            python-requests # Key Python libs for the script
          echo "::endgroup::"

      - name: Setup non-root user 'builder'
        shell: bash
        run: |
          set -e
          echo "::group::Setup non-root user 'builder'"
          useradd -m -s /bin/bash builder
          echo "builder ALL=(ALL) NOPASSWD: ALL" > /etc/sudoers.d/builder
          chmod 0440 /etc/sudoers.d/builder

          # Create common directories builder might need
          install -d -o builder -g builder -m 700 /home/builder/.gnupg
          install -d -o builder -g builder -m 755 /home/builder/.cache
          install -d -o builder -g builder -m 755 /home/builder/.local/share
          install -d -o builder -g builder -m 755 /home/builder/.ssh
          echo "::endgroup::"

      - name: Install paru (AUR helper) for 'builder'
        run: |
          set -e
          cd /tmp
          echo "::group::Install paru (AUR helper)"
          sudo -u builder HOME=/home/builder git clone https://aur.archlinux.org/paru-bin.git
          cd paru-bin
          sudo -u builder HOME=/home/builder makepkg -si --noconfirm
          echo -e "[options]\nBatchInstall\nBottomUp\nRemoveMake\nSudoLoop\nUseAsk" | tee /etc/paru.conf > /dev/null
          echo "::endgroup::"

      - name: Pull AUR sourced dependencies for downstream workflows
        run: |
          set -e
          echo "::group::Install paru sourced dependencies"
          sudo -u builder paru -S --noconfirm python-looseversion
          echo "::endgroup::"

      - name: Setup SSH key for AUR access by 'builder'
        if: env.AUR_SSH_PRIVATE_KEY_CONTENT != ''
        run: |
          set -e
          echo "::group::Setup SSH key for AUR"
          SSH_DIR="/home/builder/.ssh"
          echo "${AUR_SSH_PRIVATE_KEY_CONTENT}" > "${SSH_DIR}/aur_key"
          
          cat <<EOF > "${SSH_DIR}/config"
          Host aur.archlinux.org
            User aur
            IdentityFile ${SSH_DIR}/aur_key
            StrictHostKeyChecking accept-new # Or use ssh-keyscan if preferred
          EOF

          chown -R builder:builder "${SSH_DIR}"
          chmod 700 "${SSH_DIR}"
          chmod 600 "${SSH_DIR}/aur_key" "${SSH_DIR}/config"
          
          echo "SSH key setup for AUR complete."
          ls -ldn "${SSH_DIR}" "${SSH_DIR}/aur_key" "${SSH_DIR}/config" # -n for numeric UID/GID
          echo "::endgroup::"
        env:
          AUR_SSH_PRIVATE_KEY_CONTENT: ${{ env.AUR_SSH_PRIVATE_KEY_CONTENT }}


      - name: Configure Git for 'builder' user
        run: |
          set -e
          echo "::group::Configure Git for 'builder' user"
          sudo -u builder HOME=/home/builder git config --global user.name "${{ env.GIT_COMMIT_USER_NAME }}"
          sudo -u builder HOME=/home/builder git config --global user.email "${{ env.GIT_COMMIT_USER_EMAIL }}"
          echo "::endgroup::"

      - name: Prepare and Execute Main Python Script
        shell: bash
        run: |
          set -e
          echo "::group::Execute Main Python Script"
          SCRIPT_DIR="${{ github.workspace }}/scripts" # Assuming your consolidated script is here
          MAIN_SCRIPT_NAME="arch_package_manager.py" # Name of your consolidated script
          
          if [ ! -f "${SCRIPT_DIR}/${MAIN_SCRIPT_NAME}" ]; then
            echo "::error title=Script Missing::Consolidated script ${SCRIPT_DIR}/${MAIN_SCRIPT_NAME} not found!"
            exit 1
          fi

          # Copy the script to a location accessible by builder, ensure it's executable
          cp "${SCRIPT_DIR}/${MAIN_SCRIPT_NAME}" "/home/builder/${MAIN_SCRIPT_NAME}"
          chown builder:builder "/home/builder/${MAIN_SCRIPT_NAME}"
          chmod +x "/home/builder/${MAIN_SCRIPT_NAME}"

          echo "Running the main package management script..."
          # Execute as builder, ensuring HOME is set for tools like gh, git, nvchecker
          sudo -E -u builder \
            HOME="/home/builder" \
            PATH="/usr/bin \
            python3 "/home/builder/${MAIN_SCRIPT_NAME}"
          echo "::endgroup::"

      - name: Upload build logs and artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ env.GITHUB_RUN_ID_FOR_ARTIFACTS }}
          path: ${{ github.workspace }}/artifacts/ # Path where script saves artifacts
          retention-days: 7
