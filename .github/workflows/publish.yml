name: aur-publish

on: 
  workflow_dispatch:

jobs:
  aur-publish:
    runs-on: ubuntu-latest

    steps:
    # Checkout the repository
    - name: Checkout repository
      uses: actions/checkout@v4

    # Cache the pacman package cache
    - name: Cache pacman package cache
      uses: actions/cache@v3
      with:
        path: /home/runner/.cache/pacman/pkg
        key: pacman-cache-${{ runner.os }}-${{ hashFiles('gnome-shell-git/PKGBUILD', 'mutter-git/PKGBUILD') }}
        restore-keys: |
          pacman-cache-${{ runner.os }}-

    # Cache the build directory
    - name: Cache AUR build directory
      uses: actions/cache@v3
      with:
        path: /tmp/package
        key: build-cache-${{ runner.os }}-${{ hashFiles('gnome-shell-git/PKGBUILD', 'mutter-git/PKGBUILD') }}
        restore-keys: |
          build-cache-${{ runner.os }}-

    - name: Publish AUR package
      uses: envolution/aur-release-action@v5.0
      with:
        package_name: gnome-shell-git # Use this if the package name in AUR is different from the repository name
        ssh_private_key: ${{ secrets.AUR_SSH_PRIVATE_KEY }} # The private SSH key to use to push the changes to the AUR
        github_token: ${{ secrets.GITHUB_TOKEN }} # The GitHub token to use to update the PKGBUILD file and the AUR submodule
        pkgbuild_path: gnome-shell-git/PKGBUILD # Use this if the PKGBUILD file is not in the root directory
        update_pkgbuild: true # Use this if you want to update the PKGBUILD in the main repository
        try_build_and_install: true # Use this if you want to try to build and install the package before publishing
        git_username: envolution # Use this if you want to change the git username (recommended)
        git_email: involution@gmail.com # Use this if you want to change the git email (recommended)
        commit_message: Auto Update %FILENAME% to %VERSION% # Use this if you want to change the commit message
        prescript: |
          #!/bin/bash
          set -o errexit -o pipefail -o nounset

          export CACHE_DIR="$HOME/mutter-cache"
          export HOME=/home/builder

          # Ensure the cache directory exists
          mkdir -p "$CACHE_DIR"

          # Check for existing cache
          if [[ -d "$CACHE_DIR" && "$(ls -A $CACHE_DIR)" ]]; then
              echo "Restoring cached mutter-git..."
              cp -r "$CACHE_DIR/"* .
          else
              echo "No cache found for mutter-git, building it..."
              cd "$HOME" # Move to the HOME directory where we have permissions
              git clone https://aur.archlinux.org/mutter-git.git
              cd mutter-git || exit 1
              makepkg --syncdeps --noconfirm --cleanbuild
              # Mark as done
              touch .done
              # Cache the built package
              cp -r * "$CACHE_DIR/"
          fi
        # postscript: scripts/post.sh # Use this if you want to run a script after the action makes changes, and finishes






    # Success notification
    - name: Success Notification
      if: success()
      run: echo "All packages have been published successfully."

    # Failure notification
    - name: Failure Notification
      if: failure()
      run: echo "Package publishing failed. Please check the logs for details."
