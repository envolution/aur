# Maintainer: envolution
# Contributor: Tony Benoy <me@tonybenoy.com>
# shellcheck shell=bash disable=SC2034,SC2154
pkgname=screenpipe
pkgver=0.2.74
pkgrel=2
pkgdesc="24/7 Screen and Audio Capture with AI-powered tools"
arch=('x86_64')
url="https://github.com/mediar-ai/screenpipe"
license=('MIT')
depends=('onnxruntime' 'ffmpeg' 'tesseract' 'curl' 'libxi' 'libxtst' 'xdo' 'xdotool')
makedepends=('python' 'python-tomlkit' 'rust' 'cargo' 'git' 'cmake')
source=(
  "$pkgname-$pkgver.tar.gz::https://github.com/mediar-ai/screenpipe/archive/refs/tags/v${pkgver}.tar.gz"
)
sha256sums=('64b0c66060e1acbb9544218411a99aebeb1133f918cdd6da3e7d6ed838a96f14')

_cflags="-std=gnu11 -fpermissive -Wno-error=implicit-function-declaration -Wno-error=incompatible-pointer-types"
_cargoconfig=.cargo/config.toml

prepare() {
  cd "$pkgname-$pkgver"
  cargo fetch --target "x86_64-unknown-linux-gnu"

  export RUSTUP_TOOLCHAIN=stable

  # there's probably a better way to modify the config.toml
  # so we can avoid requiring python for building.
  # this just seems the safest atm. I know upstream is
  # modifying [env] and for now we have to ensure it's included
 
  python - <<EOF
import tomlkit

path = "$_cargoconfig"
with open(path, "r", encoding="utf-8") as f:
    doc = tomlkit.parse(f.read())

doc.setdefault("env", {})
doc["env"]["CFLAGS"] = "$_cflags"
doc["env"]["CMAKE_POLICY_VERSION_MINIMUM"] = "3.5"

with open(path, "w", encoding="utf-8") as f:
    f.write(tomlkit.dumps(doc))
EOF
}

build() {
  cd "$pkgname-$pkgver"
  export CFLAGS=${_cflags}
  cargo build --release
}

package() {
  install -Dm755 "$pkgname-$pkgver/target/release/screenpipe" "$pkgdir/usr/bin/screenpipe"
  install -Dm644 "$pkgname-$pkgver/README.md" "$pkgdir/usr/share/doc/$pkgname/README.md"
  install -Dm644 "$pkgname-$pkgver/LICENSE.md" "$pkgdir/usr/share/licenses/$pkgname/LICENSE.md"
}
# vim:set ts=2 sw=2 et:
