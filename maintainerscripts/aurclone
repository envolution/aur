#!/usr/bin/env python3
from pathlib import Path
from shutil import copy2, copytree, rmtree
from subprocess import CalledProcessError, check_call
from datetime import datetime
import typer
from rich import print
from rich.prompt import Confirm
from rich.console import Console

app = typer.Typer()
console = Console(stderr=True)


def get_temp_dir(pkgname: str) -> Path:
    timestamp = datetime.now().strftime("%Y%m%d%H%M%S")
    return Path(f"/tmp/{timestamp}_{pkgname}")


def check_existing_tmp(pkgname: str) -> bool:
    return any(p.name.endswith(f"_{pkgname}") for p in Path("/tmp").iterdir())


def remove_existing_tmp(pkgname: str):
    for p in Path("/tmp").iterdir():
        if p.name.endswith(f"_{pkgname}"):
            rmtree(p)
            console.log(f"Removed existing directory: {p}")
            return


def clone_repo(pkgname: str, target_dir: Path) -> bool:
    try:
        repo_url = f"ssh://aur@aur.archlinux.org/{pkgname}.git"
        console.log(f"Cloning from {repo_url}")
        check_call(["git", "clone", repo_url], cwd=target_dir)
        console.log(f"Repository cloned into {target_dir}")
        return True
    except CalledProcessError as e:
        console.print(f"[red]Error cloning repository:[/red] {e}")
        return False


def copy_cached_files(pkgname: str, dest_dir: Path):
    cache_dir = Path.home() / "github/envolution/aur/maintain/build" / pkgname
    if not cache_dir.is_dir():
        return

    console.print(f"[yellow]Cached GitHub version found at {cache_dir}[/yellow]")

    for item in cache_dir.iterdir():
        dest = dest_dir / item.name
        if item.is_dir():
            copytree(item, dest, dirs_exist_ok=True)
        else:
            copy2(item, dest)
    console.log("Cached files copied to cloned directory")


@app.command()
def aurclone(pkgname: str):
    """Clone an AUR package into a temporary directory, restoring from cache if available."""

    if check_existing_tmp(pkgname):
        if not Confirm.ask(f"Temporary clone for '{pkgname}' already exists. Overwrite?"):
            console.print("[red]Aborting clone.[/red]")
            raise typer.Exit(1)
        remove_existing_tmp(pkgname)

    temp_dir = get_temp_dir(pkgname)
    pkg_dir = temp_dir / pkgname
    temp_dir.mkdir(parents=True, exist_ok=True)

    if not clone_repo(pkgname, temp_dir):
        raise typer.Exit(1)

    if pkg_dir.is_dir():
        copy_cached_files(pkgname, pkg_dir)
        console.log(f"[green]Changed into directory:[/green] {pkg_dir}")
        print(pkg_dir)
    else:
        console.print(f"[red]Expected directory '{pkg_dir}' not found after cloning.[/red]")
        raise typer.Exit(1)


if __name__ == "__main__":
    app()
