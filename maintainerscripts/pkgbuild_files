#!/usr/bin/env python
import os
import sys
import json
from typing import Tuple
from pathlib import Path
from bashvar_sentry import source_and_get_vars


def is_valid_filename(filename: str, optional: bool = False) -> Tuple[bool, str]:
    """
    Validate whether the filename is a local file and not a URL/path.
    If it uses 'newname::oldname' format, it resolves to 'oldname'.
    Returns (True, resolved_filename) if valid and exists, otherwise (False, "").
    """
    # Filter out URLs or paths (those containing '/')
    if "/" in filename:
        print(
            f"{filename} is being skipped (appears to be a URL or path)",
            file=sys.stderr,
        )
        return False, ""

    # Handle :: source rename syntax
    resolved = filename
    if "::" in filename:
        _, right = filename.split("::", 1)
        resolved = right

    # Check for file existence
    if not Path(resolved).is_file():
        if optional:
            print(
                f"Optional file missing: {filename} (resolved as {resolved}) in {os.getcwd()}. Skipping.",
                file=sys.stderr,
            )
            return False, ""
        else:
            raise FileNotFoundError(
                f"Required file missing: {filename} (resolved as {resolved}) in {os.getcwd()}"
            )

    return True, filename if "::" not in filename else filename.split("::", 1)[0]


def main():
    pkgbuild_path = "PKGBUILD"
    additional_sources = [".nvchecker.toml", "PKGBUILD", ".SRCINFO"]
    optional_sources = [".nvchecker.toml", ".SRCINFO"]

    source_files = source_and_get_vars(pkgbuild_path, target_vars=["source"])["source"]
    source_files += additional_sources

    valid_files = []

    for src in source_files:
        optional = src in optional_sources
        is_valid, resolved_name = is_valid_filename(src, optional=optional)
        if is_valid:
            valid_files.append(resolved_name)

    # Print the valid files
    if valid_files:
        print("Valid files found in the PKGBUILD source array:", file=sys.stderr)
        json_string = json.dumps(valid_files, indent=4)
        sys.stdout.write(json_string)
        print("", file=sys.stderr)
    else:
        print("No valid files found in the PKGBUILD source array.", file=sys.stderr)


if __name__ == "__main__":
    main()
