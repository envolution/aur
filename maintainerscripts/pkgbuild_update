#!/usr/bin/env python
import argparse
import json
import os
import re
import subprocess
from pathlib import Path


def update_pkgbuild(pkgbuild_path, maintainerstring):
    """
    Updates the PKGBUILD file:
    - Ensures "# Maintainer: {maintainerstring}" is present at the top.
    - Converts other "# Maintainer:" lines to "# Contributor:".
    - Replaces "#vim:set" lines with "# vim:set ts=2 sw=2 et:".
    """

# Define the shellcheck configuration line
    shellcheck_line = "# shellcheck shell=bash disable=SC2034,SC2154"

    with open(pkgbuild_path, 'r') as file:
        content = file.readlines()

# Remove any existing # shellcheck lines
    content = [line for line in content if not line.startswith("# shellcheck")]

# Ensure "# Maintainer: {maintainerstring}" is at the top
    if not any(line.startswith(f"# Maintainer: {maintainerstring}") for line in content):
        content.insert(0, f"# Maintainer: {maintainerstring}\n")

# Replace other "# Maintainer:" with "# Contributor:"
    for i, line in enumerate(content):
        if line.startswith("# Maintainer:") and not line.startswith(f"# Maintainer: {maintainerstring}"):
            content[i] = line.replace("# Maintainer:", "# Contributor:", 1)

# Find the last occurrence of a Maintainer/Contributor line to insert the shellcheck line
    for i, line in enumerate(content):
        if line.startswith(("# Maintainer:", "# Contributor:")):
            last_maintainer_contributor_index = i

# Insert the shellcheck line below the last Maintainer/Contributor line
    content.insert(last_maintainer_contributor_index + 1, shellcheck_line + "\n")

# Replace "#vim:set" lines with corrected format
    content = [re.sub(r"^#vim:set.*", "# vim:set ts=2 sw=2 et:", line) for line in content]
    if not any(re.match(r"^# vim:set ts=2 sw=2 et:", line) for line in content):
        content.append("# vim:set ts=2 sw=2 et:\n")

# Write changes back to PKGBUILD
    with open(pkgbuild_path, 'w') as file:
        file.writelines(content)



def get_nvchecker_version(pkg_name):
    """
    Runs nvchecker to fetch the latest version of the package from stdout.
    Parses the JSON output to extract the version for the specified package.
    """
    try:
        result = subprocess.run(
            ["nvchecker", "-c", ".nvchecker.toml","-k","/home/evo/nvchecker/keyfile.toml", "--logger", "json"],
            capture_output=True,
            text=True,
            check=True,
        )
    except subprocess.CalledProcessError as e:
        raise RuntimeError(f"nvchecker failed: {e.stderr.strip()}")

    # Parse JSON output to find the version
    for line in result.stdout.splitlines():
        try:
            log_entry = json.loads(line.strip())
            if log_entry.get("logger_name") == "nvchecker.core" and log_entry.get("name") == pkg_name:
                return log_entry.get("version")
        except json.JSONDecodeError:
            continue

    raise ValueError(f"Version for package '{pkg_name}' not found in nvchecker output.")


def update_pkgver(pkgbuild_path, new_version):
    """
    Updates the first occurrence of the pkgver= line in the PKGBUILD file.
    """
    with open(pkgbuild_path, 'r') as file:
        content = file.readlines()

    # Replace the first occurrence of pkgver=
    for i, line in enumerate(content):
        if line.startswith("pkgver="):
            content[i] = f"pkgver={new_version}\n"
            break

    # Write changes back to PKGBUILD
    with open(pkgbuild_path, 'w') as file:
        file.writelines(content)


def validate_pkgbuild(pkgbuild_path):
    """
    Validates the PKGBUILD file:
    - Formats with shfmt.
    - Creates a backup of the original file.
    - Runs shellcheck and namcap for syntax and linting.
    """
    # Format with shfmt
    formatted_path = pkgbuild_path.with_suffix('.new')
    subprocess.run(["shfmt", "-i", "2", pkgbuild_path], stdout=open(formatted_path, 'w'))

    # Backup original PKGBUILD
    backup_path = Path(f"{pkgbuild_path}.bak")
    count = 1
    while backup_path.exists():
        backup_path = Path(f"{pkgbuild_path}.bak_{count}")
        count += 1
    pkgbuild_path.rename(backup_path)

    # Replace original PKGBUILD with formatted one
    formatted_path.rename(pkgbuild_path)

    # Run shellcheck
    subprocess.run(["shellcheck","-S", "error", pkgbuild_path], check=True)

    # Run namcap
    subprocess.run(["namcap", pkgbuild_path], check=True)


def main():
    # Parse command-line arguments
    parser = argparse.ArgumentParser(description="Automate PKGBUILD maintenance tasks.")
    
    # Optional argument for maintainerstring, defaulting to 'envolution'
    parser.add_argument("--maintainerstring", default="envolution", help="The maintainer string to add to the PKGBUILD. Default is 'envolution'.")
    
    # Optional argument for package, defaulting to the basename of the current working directory
    parser.add_argument("--package", default=os.path.basename(os.getcwd()), help="The package name to update with nvchecker. Default is the current directory name.")
    
    # Optional argument for package, defaulting to the basename of the current working directory
    parser.add_argument("--nover", action="store_true", help="Disable version check for the package.")
        

    # Parse arguments
    args = parser.parse_args()

    # Access the parsed arguments
    print(f"Maintainer String: {args.maintainerstring}")
    print(f"Package: {args.package}")
    
    # Define paths
    pkgbuild_path = Path("PKGBUILD")

    # Perform tasks
    try:
        print(f"Updating PKGBUILD for maintainer: {args.maintainerstring}")
        update_pkgbuild(pkgbuild_path, args.maintainerstring)

        if args.nover:
            print("Skipping version check.")
            return
        else:
            print(f"Fetching latest version for package: {args.package}")
            version = get_nvchecker_version(args.package)

        print(f"Updating pkgver to: {version}")
        update_pkgver(pkgbuild_path, version)

        print("Validating PKGBUILD...")
        validate_pkgbuild(pkgbuild_path)

        print("PKGBUILD update complete.")
    except Exception as e:
        print(f"Error: {e}")


if __name__ == "__main__":
    main()
